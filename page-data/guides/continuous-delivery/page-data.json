{"componentChunkName":"component---src-pages-guides-continuous-delivery-index-mdx","path":"/guides/continuous-delivery/","result":{"pageContext":{"isCreatedByStatefulCreatePages":true,"frontmatter":{"title":"Continuous Delivery"},"relativePagePath":"/guides/continuous-delivery/index.mdx","titleType":"page","MdxNode":{"id":"f36a2ab6-062c-56e3-8d73-7b92dbea8fac","children":[],"parent":"4b37848d-436b-53c7-b7c5-d5707e7466a4","internal":{"content":"---\ntitle: Continuous Delivery\n---\n\n<PageDescription>\n\nUse ArgoCD to continuously deliver application changes into the runtime environment\n\n</PageDescription>\n\n## What is Continuous Delivery\n\nContinuous Delivery is the DevOps approach of continuously making new versions of a application components available\nfor deployment to an environment. The process involves automation of the build and validation process and concludes with\na new version of the application that is available for promotion to another environment.\n\nContinuous Delivery is closely related to Continuous Deployment with the only distinction being that in \nContinuous Deployment the new versions are automatically deployed into the next environment. In Continuous\nDelivery the automated deployment requires the deployment to be manually triggered.\n\n## What is Git Ops\n\nGitOps is the operational pattern of using Git repositories as the source od truth for\ndefining the configuration that makes up the desired state of the application.\n\n## Common tools\n\n### What is ArgoCD\n\n\"ArgoCD is a delarative, GitOps continuous delivery tools for Kubernetes\"\n\nIt supports defining kubernetes manifests in a number of ways:\n\n- kustomize\n- helm charts\n- ksonnet\n- jsonnet\n- plain directory of yaml/json manifests\n\nArgoCD synchronizes the application state with the desired state defined in Git and\nautomates the deployment of kubernetes resources to ensure they match.\n\n### Configuring GitOps with ArgoCD\n\nYou must have completed the [ArgoCD Setup](/getting-start/argocd-setup) before continuing.\n\n#### Setup GitOps repo\n\n1. Create a new repo from the ArgoCD Starter Kit template - https://github.com/ibm-garage-cloud/template-argocd-test/generate\n\n2. Clone the project to your machine\n\n3. Create a branch named `test` to configure the values for deployment to the `test` environment\n\n    ```bash\n    git checkout -b test\n    ```\n\n4. Copy `app-artifactory` folder into folder for one of the application project names\n\n5. Update the `requirements.yaml` with the following values:\n    - `name` - the name of helm chart/image\n    - `repository` - the url to artifactory within the cluster (`igc ingress -n tools`)\n\n6. Update the `values.yaml` file with environment-specific values for the options available in the helm chart.\n\n    **Note:** The helm values will need to be prefixed with the helm chart name that was provided in the \n    previous step. For example, assuming the helm chart is `message-logger` the values.yaml file would look like the following:\n    ```yaml\n    message-logger:\n      replicaCount: 3\n    ``` \n\n7. Repeat steps 4-6 for each helm chart/image in the application\n\n#### Register the git repo in ArgoCD\n\nNow that the repository has been created, we need to tell ArgoCD where it is.\n\n1. Get the ArgoCD login information from the `igc credentials` cli command\n\n    **Note:** You need to be logged into the cluster on the command-line for the CLI to access the cluster information.\n\n2. Log into ArgoCD\n\n3. Click on the gear icon on the left menu to access the Settings options\n\n    ![ArgoCD config](/images/argocd-config.png)\n\n4. Select the `Repositories` option\n\n5. Click the `Connect Repo` button at the top and provide the url, username, and personal access token for the Git repo.\n\n#### Create a project in ArgoCD (Optional)\n\nIn ArgoCD terms, each deployable component is an application and applications are grouped into projects. Projects are not \nrequired for ArgoCD to be able to deploy applications but it helps to organize applications and provide some restrictions\non what can be done for applications that make up a project.\n\nTo create a project, do the following:\n\n1. Log into ArgoCD\n\n2. Click on the gear icon on the left menu to access the Settings options\n\n    ![ArgoCD config](/images/argocd-config.png)\n\n3. Select the `Projects` option\n\n4. Click the `New Project` button at the top of the page.\n\n5. Provide the following values then press `Create`:\n\n    - `name` - provide the name for the project\n    - `description` - a brief description of the project\n    - `sources` - click `add source` and pick the Git repository from the list that was added previously\n    - `destinations` - click `add destination` and provide the cluster url(s) and namespace(s) to which the project applications can be deployed\n\n    **Note:** Initially, the only cluster that is available is the one that ArgoCD is running in - `https://kubernetes.default.svc`.\n\n#### Create the `gitops-cd-secret`\n\nThe last stage in the Jenkins pipeline updates the version number in the `requirements.yaml` to version of the helm chart\nthat was just built. In order for the pipeline to push the updated file into the GitOps repo, it needs to read the url\nand credentials from a Kubernetes secret named `gitops-cd-secret`.\n\nFortunately, a helm chart has been provided in the ArgoCD Starter Kit to help in the creation of the secret. The following\nsteps will walk through using the helm chart to create the secret.\n\n1. Log into the cluster on the command-line.\n\n2. Change the directory to the root of the ArgoCD Starter Kit repo that was cloned previously.\n\n3. Run `igc tools` to start the tools environment\n\n4. Within the tools image context, run the following to create the secret:\n\n```bash\nhelm template \\ \n    --name gitops-cd-secret \\\n    --namespace tools \\\n    --set git.username={GIT_USERNAME} \\\n    --set git.personalAccessToken={GIT_PAT} \\\n    --set git.host={GIT_HOST} \\\n    --set git.org={GIT_ORG} \\\n    --set git.repo={GIT_REPO} | \\\n    kubectl apply -n tools -f -\n```\n\n#### Add an application in ArgoCD for each application component (helm chart) \n\nThe last step in the process is to define the application(s) within ArgoCD that should be managed. This consists of\nconnecting the config within the Git repo to the cluster and namespace.\n\n1. Log into ArgoCD\n\n2. Click `New Application` and provide the following values:\n\n    - `application name` - The name of the application. It is recommend to use the format of `{namespace}-{image name}`\n    - `project` - The project with which the application should be included\n    - `sync-policy` - The manner with which ArgoCD will use to manage the deployed artifacts. `Automatic with pruning` is \n    recommended\n    - `repository url` - The Git url where the configuration is stored\n    - `revision` - The branch where the configuration for this instance is stored\n    - `path` - The path within the repository where the application config is located\n    - `destination cluster` - The cluster url for the deployment\n    - `destination namespace` - The namespace where the application should be deployed\n\n3. Repeat that step for each application and each environment\n\n","type":"Mdx","contentDigest":"6d559cf163430f0fdcd2ae52c46f9f5d","counter":413,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Continuous Delivery"},"exports":{},"rawBody":"---\ntitle: Continuous Delivery\n---\n\n<PageDescription>\n\nUse ArgoCD to continuously deliver application changes into the runtime environment\n\n</PageDescription>\n\n## What is Continuous Delivery\n\nContinuous Delivery is the DevOps approach of continuously making new versions of a application components available\nfor deployment to an environment. The process involves automation of the build and validation process and concludes with\na new version of the application that is available for promotion to another environment.\n\nContinuous Delivery is closely related to Continuous Deployment with the only distinction being that in \nContinuous Deployment the new versions are automatically deployed into the next environment. In Continuous\nDelivery the automated deployment requires the deployment to be manually triggered.\n\n## What is Git Ops\n\nGitOps is the operational pattern of using Git repositories as the source od truth for\ndefining the configuration that makes up the desired state of the application.\n\n## Common tools\n\n### What is ArgoCD\n\n\"ArgoCD is a delarative, GitOps continuous delivery tools for Kubernetes\"\n\nIt supports defining kubernetes manifests in a number of ways:\n\n- kustomize\n- helm charts\n- ksonnet\n- jsonnet\n- plain directory of yaml/json manifests\n\nArgoCD synchronizes the application state with the desired state defined in Git and\nautomates the deployment of kubernetes resources to ensure they match.\n\n### Configuring GitOps with ArgoCD\n\nYou must have completed the [ArgoCD Setup](/getting-start/argocd-setup) before continuing.\n\n#### Setup GitOps repo\n\n1. Create a new repo from the ArgoCD Starter Kit template - https://github.com/ibm-garage-cloud/template-argocd-test/generate\n\n2. Clone the project to your machine\n\n3. Create a branch named `test` to configure the values for deployment to the `test` environment\n\n    ```bash\n    git checkout -b test\n    ```\n\n4. Copy `app-artifactory` folder into folder for one of the application project names\n\n5. Update the `requirements.yaml` with the following values:\n    - `name` - the name of helm chart/image\n    - `repository` - the url to artifactory within the cluster (`igc ingress -n tools`)\n\n6. Update the `values.yaml` file with environment-specific values for the options available in the helm chart.\n\n    **Note:** The helm values will need to be prefixed with the helm chart name that was provided in the \n    previous step. For example, assuming the helm chart is `message-logger` the values.yaml file would look like the following:\n    ```yaml\n    message-logger:\n      replicaCount: 3\n    ``` \n\n7. Repeat steps 4-6 for each helm chart/image in the application\n\n#### Register the git repo in ArgoCD\n\nNow that the repository has been created, we need to tell ArgoCD where it is.\n\n1. Get the ArgoCD login information from the `igc credentials` cli command\n\n    **Note:** You need to be logged into the cluster on the command-line for the CLI to access the cluster information.\n\n2. Log into ArgoCD\n\n3. Click on the gear icon on the left menu to access the Settings options\n\n    ![ArgoCD config](/images/argocd-config.png)\n\n4. Select the `Repositories` option\n\n5. Click the `Connect Repo` button at the top and provide the url, username, and personal access token for the Git repo.\n\n#### Create a project in ArgoCD (Optional)\n\nIn ArgoCD terms, each deployable component is an application and applications are grouped into projects. Projects are not \nrequired for ArgoCD to be able to deploy applications but it helps to organize applications and provide some restrictions\non what can be done for applications that make up a project.\n\nTo create a project, do the following:\n\n1. Log into ArgoCD\n\n2. Click on the gear icon on the left menu to access the Settings options\n\n    ![ArgoCD config](/images/argocd-config.png)\n\n3. Select the `Projects` option\n\n4. Click the `New Project` button at the top of the page.\n\n5. Provide the following values then press `Create`:\n\n    - `name` - provide the name for the project\n    - `description` - a brief description of the project\n    - `sources` - click `add source` and pick the Git repository from the list that was added previously\n    - `destinations` - click `add destination` and provide the cluster url(s) and namespace(s) to which the project applications can be deployed\n\n    **Note:** Initially, the only cluster that is available is the one that ArgoCD is running in - `https://kubernetes.default.svc`.\n\n#### Create the `gitops-cd-secret`\n\nThe last stage in the Jenkins pipeline updates the version number in the `requirements.yaml` to version of the helm chart\nthat was just built. In order for the pipeline to push the updated file into the GitOps repo, it needs to read the url\nand credentials from a Kubernetes secret named `gitops-cd-secret`.\n\nFortunately, a helm chart has been provided in the ArgoCD Starter Kit to help in the creation of the secret. The following\nsteps will walk through using the helm chart to create the secret.\n\n1. Log into the cluster on the command-line.\n\n2. Change the directory to the root of the ArgoCD Starter Kit repo that was cloned previously.\n\n3. Run `igc tools` to start the tools environment\n\n4. Within the tools image context, run the following to create the secret:\n\n```bash\nhelm template \\ \n    --name gitops-cd-secret \\\n    --namespace tools \\\n    --set git.username={GIT_USERNAME} \\\n    --set git.personalAccessToken={GIT_PAT} \\\n    --set git.host={GIT_HOST} \\\n    --set git.org={GIT_ORG} \\\n    --set git.repo={GIT_REPO} | \\\n    kubectl apply -n tools -f -\n```\n\n#### Add an application in ArgoCD for each application component (helm chart) \n\nThe last step in the process is to define the application(s) within ArgoCD that should be managed. This consists of\nconnecting the config within the Git repo to the cluster and namespace.\n\n1. Log into ArgoCD\n\n2. Click `New Application` and provide the following values:\n\n    - `application name` - The name of the application. It is recommend to use the format of `{namespace}-{image name}`\n    - `project` - The project with which the application should be included\n    - `sync-policy` - The manner with which ArgoCD will use to manage the deployed artifacts. `Automatic with pruning` is \n    recommended\n    - `repository url` - The Git url where the configuration is stored\n    - `revision` - The branch where the configuration for this instance is stored\n    - `path` - The path within the repository where the application config is located\n    - `destination cluster` - The cluster url for the deployment\n    - `destination namespace` - The namespace where the application should be deployed\n\n3. Repeat that step for each application and each environment\n\n","fileAbsolutePath":"/Users/bwoolf/dev/git/ibm-garage-cloud/ibm-garage-developer-guide/src/pages/guides/continuous-delivery/index.mdx"}}}}