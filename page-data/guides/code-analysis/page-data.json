{"componentChunkName":"component---src-pages-guides-code-analysis-index-mdx","path":"/guides/code-analysis/","result":{"pageContext":{"isCreatedByStatefulCreatePages":true,"frontmatter":{"title":"Code Analysis"},"relativePagePath":"/guides/code-analysis/index.mdx","titleType":"page","MdxNode":{"id":"272faeb9-c90e-57a8-85f8-8fba6a679aaf","children":[],"parent":"d5a455a3-95ca-579c-ab0e-d2e6b5614c5c","internal":{"content":"---\ntitle: Code Analysis\n---\n\n<PageDescription>\n\nThis guide will explain how to use SonarQube to analyze your code's quality\n\n</PageDescription>\n\nSonarQube automates performing static code analysis.\n\n## What is code analysis \n\nStatic code analysis (a.k.a. code analysis) is a method of debugging by performing automated evaluation of code \nwithout executing the program. The analysis is structured as a set of coding rules that evaluate the code's quality. \nAnalysis can be performed on source code or compiled code. The analyzer must support the programming lanuage\nthe code is written in so that it can parse the code like a compiler or simulate its execution.\n\nStatic code analysis differs from dynamic analysis, which observes and evaluates a running program. Dynamic analysis \nrequires test inputs and can meansure runtime qualities like execution time and resource consumption. A code review is \nstatic code analysis performed by a human.\n\nStatic code analysis can evaluate several different aspects of code quality:\n- **Reliability**\n    - **Bug**: Programming error that breaks functionality\n- **Security**\n    - **Vulnerability**: A point in a program that can be attacked\n    - **Hotspot**: Code that uses a security-sensitive API\n- **Maintainability**\n    - **Coding standards**: Practices that increase the human readability and undestandability of code\n    - **Code smell**: Code that is confusing and difficult to maintain\n    - **Technical debt**: Estimated time required to fix all maintainability issues\n- **Complexity**\n    - **Code complexity**: Code's control flow and number of paths through the code\n- **Duplications**\n    - **Duplicated code**: The same code sequence appearing twice in the same program\n- **Manageability**\n    - **Testability**: How easily the program can be tested\n    - **Portability**: How easily the program can be reused in different environments\n    - **Reusability**: The program's modularity, loose coupling, and limited interdependencies\n\nStatic code analysis collects several metrics that measure code quality:\n- **Issues**\n    - **Issue type**: Bug, Vunerability, Code Smell\n    - **Issue sevarity**\n        - **Blocker**: Bug with a high probability to impact the behavior of the application in production\n        - **Critical**: Bug with a low probability to impact the behavior of the application in production, or a security vulnerability\n        - **Major**: Code smell with high impact to developer productivity\n        - **Minor**: Code smell with slight impact to developer productivity\n        - **Info**: Neither a bug nor a code smell, just a finding\n- **Size**\n    - **Classes**: Number of class definitions (concrete, abstract, nested, interfaces, enums, annotations)\n    - **Lines of code**: Linespace seperated text that is not whitespace or comments\n    - **Comment lines**: Linespace seperated text containing significant commentary or commented-out code\n- **Tests**\n    - **Test coverage**: Code that was executed by a test suite\n\n## What is SonarQube\n\n## Code Analysis in the Pipeline\n\n\n\n","type":"Mdx","contentDigest":"a1dd34acd7af125f306f569ff47518e7","counter":441,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Code Analysis"},"exports":{},"rawBody":"---\ntitle: Code Analysis\n---\n\n<PageDescription>\n\nThis guide will explain how to use SonarQube to analyze your code's quality\n\n</PageDescription>\n\nSonarQube automates performing static code analysis.\n\n## What is code analysis \n\nStatic code analysis (a.k.a. code analysis) is a method of debugging by performing automated evaluation of code \nwithout executing the program. The analysis is structured as a set of coding rules that evaluate the code's quality. \nAnalysis can be performed on source code or compiled code. The analyzer must support the programming lanuage\nthe code is written in so that it can parse the code like a compiler or simulate its execution.\n\nStatic code analysis differs from dynamic analysis, which observes and evaluates a running program. Dynamic analysis \nrequires test inputs and can meansure runtime qualities like execution time and resource consumption. A code review is \nstatic code analysis performed by a human.\n\nStatic code analysis can evaluate several different aspects of code quality:\n- **Reliability**\n    - **Bug**: Programming error that breaks functionality\n- **Security**\n    - **Vulnerability**: A point in a program that can be attacked\n    - **Hotspot**: Code that uses a security-sensitive API\n- **Maintainability**\n    - **Coding standards**: Practices that increase the human readability and undestandability of code\n    - **Code smell**: Code that is confusing and difficult to maintain\n    - **Technical debt**: Estimated time required to fix all maintainability issues\n- **Complexity**\n    - **Code complexity**: Code's control flow and number of paths through the code\n- **Duplications**\n    - **Duplicated code**: The same code sequence appearing twice in the same program\n- **Manageability**\n    - **Testability**: How easily the program can be tested\n    - **Portability**: How easily the program can be reused in different environments\n    - **Reusability**: The program's modularity, loose coupling, and limited interdependencies\n\nStatic code analysis collects several metrics that measure code quality:\n- **Issues**\n    - **Issue type**: Bug, Vunerability, Code Smell\n    - **Issue sevarity**\n        - **Blocker**: Bug with a high probability to impact the behavior of the application in production\n        - **Critical**: Bug with a low probability to impact the behavior of the application in production, or a security vulnerability\n        - **Major**: Code smell with high impact to developer productivity\n        - **Minor**: Code smell with slight impact to developer productivity\n        - **Info**: Neither a bug nor a code smell, just a finding\n- **Size**\n    - **Classes**: Number of class definitions (concrete, abstract, nested, interfaces, enums, annotations)\n    - **Lines of code**: Linespace seperated text that is not whitespace or comments\n    - **Comment lines**: Linespace seperated text containing significant commentary or commented-out code\n- **Tests**\n    - **Test coverage**: Code that was executed by a test suite\n\n## What is SonarQube\n\n## Code Analysis in the Pipeline\n\n\n\n","fileAbsolutePath":"/Users/bwoolf/dev/git/ibm-garage-cloud/ibm-garage-developer-guide/src/pages/guides/code-analysis/index.mdx"}}}}