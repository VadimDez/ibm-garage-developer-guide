{"componentChunkName":"component---src-pages-getting-started-deploy-app-index-mdx","path":"/getting-started/deploy-app/","result":{"pageContext":{"isCreatedByStatefulCreatePages":true,"frontmatter":{"title":"Deploying An App"},"relativePagePath":"/getting-started/deploy-app/index.mdx","titleType":"page","MdxNode":{"id":"4d681085-c0f3-5f32-81e1-2dc4ef5d71f5","children":[],"parent":"aa62e9d1-e9dc-539c-9c85-0bb200f7367a","internal":{"content":"---\ntitle: Deploying An App\n---\n\n<PageDescription>\n\nUse a Starter Kit Template to create a sample app and the Jenkins pipeline to deploy it into the cluster\n\n</PageDescription>\n\n## Overview\n\nNow that you have prepared your Developer Tools environment for cloud-native application development, \nyou can now create a new app using one of the Starter Kit Templates. These have been created to include all the key \ncomponents, configuration, and frameworks to get you started on creating the code you need for your solutions.\n\n### Demonstration video\n\nThis video will demo how to get started with using the Dashboard to develop and deploy an app.\nIt shows how to do the steps that are described below.\n\n<Video src=\"/videos/deployfirstapp.m4v\" type=\"video/m4v\" poster=\"/images/poster.png\"/>\n\n### Open the Developer Tools Dashboard\n\nThe Developer Tools Dashboard makes it easy for you to navigate to the tools, including a section that\nlists the [Starter Kit Templates](/starterkits/overview). These templates have been created to give you \na more comprehensive starting point for you apps.\n\n- Install the [IGC CLI](/getting-started/cli)\n- Open the [Developer Tools Dashboard](/getting-started/dashboard)\n- Click on **Starter Kits** tab\n- Pick one of the templates that is a good architectural fit for you application and the language and framework\nthat you prefer to work with. Click on the tile to create a new copy repository from the template repository.\n(You can also click on the **Git Icon** to browse the template repository.)\n\n<InlineNotification>\n\nEach Starter Kit Template is a [GitHub template repository](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-template-repository). \nThis feature copies the directory structure and files of a template repository into a new repository in your \norganisation with no git history.\n\n</InlineNotification>\n\n- Complete the [GitHub create repository from template](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-from-a-template) \nview to create the new repository\n  - You can see the source git repo displayed at the top\n  - **Owner**: Select a validate GitHub organization that you are authorised to create repositories within\n  - **Repository name**: Enter a valid name for you repo\n  - **Description**: Describe your app\n    ![Template](template.png)\n  - Press **Create repository from template**\n\nThe new repository will be created. Next, clone it to your local machine.\n- Click on **Clone or download**\n- Copy the clone SSH link, and use the `git clone` command to clone it to your developer desktop machine.\n    ```base\n    git clone git@github.com:mjperrins/stockbffnode.git\n    cd stockbffnode\n    ```\n\n### Running Locally\n\nMost developers like to run the code natively in local development environment. To do so, follow the instructions\nlisted in the **README.md** file to run the code locally. You may be required to install a\nspecific runtime like **Java**, **Node**, or **Python**.\n\n### Register App Pipeline\n\nYou now have the code in a GitHub repository and have cloned it to you local development environment.\nWe can now register the repository with the Continuous Integration pipeline technology. \n\nThe default CI pipeline tool is currently **Jenkins**. (Tekton support will be coming soon.)\nWe use the [IGC CLI](/getting-started/cli) to assist with these steps.\n\nFor Jenkins to connect to and use your GitHub repo, it will need a \n[GitHub personal access token](https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line) \nwith `public_repo` and `write:repo_hook` scopes.\n\n- Create a GitHub personal access token for Jenkins to use\n  - Navigate to [Developer Settings](https://github.com/settings/tokens) and generate a new token\n  - Select `public_repo` scope to enable git clone\n  - Select `write:repo_hook` scope so Jenkins can create a web hook\n  ![Jenkins OAuth scopes](jenkins-scopes.png)\n  - Save the token and place it in your clipboard\n\n- Make sure you are logged into you Development cluster, navigate to you Cluster in the IBM Cloud Console and click on the **Access** tab and follow the instructions to login from the command line. You can test this with the following simple command.\n    ```base\n    # Kubernetes\n    kubectl get nodes\n\n    # OpenShift\n    oc get nodes\n    ```\n\n- You can now register your app repo with Jenkins\n  - **Username**: Enter your GitHub user id\n  - **Password**: Paste your personal access token\n  - **Branch**: Select the default git branch or type in another branch you want to register\n    ```bash\n    $ igc pipeline\n    Project git repo: https://github.com/mjperrins/stockbffnode.git\n    ? Provide the username: mperrins\n    ? Please provide your password/personal access token: [hidden]\n    ? Please provide the branch the pipeline should use: master\n    Creating secret with git credentials\n    Registering pipeline\n    Creating git webhook\n    ```\n\n  The pipeline will be registered.\n\n### View App Pipeline\n\nUsing the Developer Tools Dashboard, open the Jenkins dashboard. If you already have it open, \nrefresh the page.\n\n<InlineNotification>\n\nNote: You will have to log into the Jenkins dashboard. To get the username and password, \nrun `igc credentials` using the [IGC CLI](getting-started/cli).\n\n</InlineNotification>\n\nYou will see you pipeline registered.\n\nBuild and deploy your app\n- Click on your app pipeline and click **Build Now**\n\nWait for the pipeline stages to start building.\nOnce the stages have completed, you should see a view similar to the one below.\n\n![Jenkins Pipeline](pipeline.png)\n\n### Access running app\n\nOnce the pipeline has completed successfully, the app will be deployed into the `dev` namespace\nin your Kubernetes or OpenShift cluster. You can now access the app to test it.\n\n- To access the app, retrieve the app ingress endpoint using command below\n    ```bash\n    igc ingress -n dev\n    ```\n  \n  You will see a list of apps displayed with their ingress URLs\n    ```bash\n    Host(s):\n    [\n      'http://stockbffnode-dev.showcase-dev-iks-cluster.us-south.containers.appdomain.cloud'\n    ]\n\n- Open this ingress URL in your browser and validate the app is working as expected\n\nThis completes the deployment of your first app.\n\n### Complete the setup\n\nYou now have a running application that is being built and deployed into your development cluster.\nThe next step is to prepare for Continuous Delivery, Code Analysis, and Artifact Management.\n\nTo enable this, follow these instructions to complete the setup of the **ArgoCD** and **Artifactory**:\n\n<AnchorLinks small>\n  <AnchorLink to=\"/getting-started/argocd-setup\">ArgoCD Setup</AnchorLink>\n  <AnchorLink to=\"/getting-started/artifactory-setup\">Artifactory Setup</AnchorLink>\n</AnchorLinks>\n\n\n## Guides\n\nFor more detailed instructions of how to enable to the full developer lifecycle read through the **Guides** section.\n\n<AnchorLinks small>\n  <AnchorLink to=\"/guides/overview\">Guides</AnchorLink>\n  <AnchorLink to=\"/starterkits/overview\">Starter Kit Templates</AnchorLink>\n</AnchorLinks>\n","type":"Mdx","contentDigest":"d90d521124bdc90f8f25343a55df11a9","counter":555,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Deploying An App"},"exports":{},"rawBody":"---\ntitle: Deploying An App\n---\n\n<PageDescription>\n\nUse a Starter Kit Template to create a sample app and the Jenkins pipeline to deploy it into the cluster\n\n</PageDescription>\n\n## Overview\n\nNow that you have prepared your Developer Tools environment for cloud-native application development, \nyou can now create a new app using one of the Starter Kit Templates. These have been created to include all the key \ncomponents, configuration, and frameworks to get you started on creating the code you need for your solutions.\n\n### Demonstration video\n\nThis video will demo how to get started with using the Dashboard to develop and deploy an app.\nIt shows how to do the steps that are described below.\n\n<Video src=\"/videos/deployfirstapp.m4v\" type=\"video/m4v\" poster=\"/images/poster.png\"/>\n\n### Open the Developer Tools Dashboard\n\nThe Developer Tools Dashboard makes it easy for you to navigate to the tools, including a section that\nlists the [Starter Kit Templates](/starterkits/overview). These templates have been created to give you \na more comprehensive starting point for you apps.\n\n- Install the [IGC CLI](/getting-started/cli)\n- Open the [Developer Tools Dashboard](/getting-started/dashboard)\n- Click on **Starter Kits** tab\n- Pick one of the templates that is a good architectural fit for you application and the language and framework\nthat you prefer to work with. Click on the tile to create a new copy repository from the template repository.\n(You can also click on the **Git Icon** to browse the template repository.)\n\n<InlineNotification>\n\nEach Starter Kit Template is a [GitHub template repository](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-template-repository). \nThis feature copies the directory structure and files of a template repository into a new repository in your \norganisation with no git history.\n\n</InlineNotification>\n\n- Complete the [GitHub create repository from template](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-from-a-template) \nview to create the new repository\n  - You can see the source git repo displayed at the top\n  - **Owner**: Select a validate GitHub organization that you are authorised to create repositories within\n  - **Repository name**: Enter a valid name for you repo\n  - **Description**: Describe your app\n    ![Template](template.png)\n  - Press **Create repository from template**\n\nThe new repository will be created. Next, clone it to your local machine.\n- Click on **Clone or download**\n- Copy the clone SSH link, and use the `git clone` command to clone it to your developer desktop machine.\n    ```base\n    git clone git@github.com:mjperrins/stockbffnode.git\n    cd stockbffnode\n    ```\n\n### Running Locally\n\nMost developers like to run the code natively in local development environment. To do so, follow the instructions\nlisted in the **README.md** file to run the code locally. You may be required to install a\nspecific runtime like **Java**, **Node**, or **Python**.\n\n### Register App Pipeline\n\nYou now have the code in a GitHub repository and have cloned it to you local development environment.\nWe can now register the repository with the Continuous Integration pipeline technology. \n\nThe default CI pipeline tool is currently **Jenkins**. (Tekton support will be coming soon.)\nWe use the [IGC CLI](/getting-started/cli) to assist with these steps.\n\nFor Jenkins to connect to and use your GitHub repo, it will need a \n[GitHub personal access token](https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line) \nwith `public_repo` and `write:repo_hook` scopes.\n\n- Create a GitHub personal access token for Jenkins to use\n  - Navigate to [Developer Settings](https://github.com/settings/tokens) and generate a new token\n  - Select `public_repo` scope to enable git clone\n  - Select `write:repo_hook` scope so Jenkins can create a web hook\n  ![Jenkins OAuth scopes](jenkins-scopes.png)\n  - Save the token and place it in your clipboard\n\n- Make sure you are logged into you Development cluster, navigate to you Cluster in the IBM Cloud Console and click on the **Access** tab and follow the instructions to login from the command line. You can test this with the following simple command.\n    ```base\n    # Kubernetes\n    kubectl get nodes\n\n    # OpenShift\n    oc get nodes\n    ```\n\n- You can now register your app repo with Jenkins\n  - **Username**: Enter your GitHub user id\n  - **Password**: Paste your personal access token\n  - **Branch**: Select the default git branch or type in another branch you want to register\n    ```bash\n    $ igc pipeline\n    Project git repo: https://github.com/mjperrins/stockbffnode.git\n    ? Provide the username: mperrins\n    ? Please provide your password/personal access token: [hidden]\n    ? Please provide the branch the pipeline should use: master\n    Creating secret with git credentials\n    Registering pipeline\n    Creating git webhook\n    ```\n\n  The pipeline will be registered.\n\n### View App Pipeline\n\nUsing the Developer Tools Dashboard, open the Jenkins dashboard. If you already have it open, \nrefresh the page.\n\n<InlineNotification>\n\nNote: You will have to log into the Jenkins dashboard. To get the username and password, \nrun `igc credentials` using the [IGC CLI](getting-started/cli).\n\n</InlineNotification>\n\nYou will see you pipeline registered.\n\nBuild and deploy your app\n- Click on your app pipeline and click **Build Now**\n\nWait for the pipeline stages to start building.\nOnce the stages have completed, you should see a view similar to the one below.\n\n![Jenkins Pipeline](pipeline.png)\n\n### Access running app\n\nOnce the pipeline has completed successfully, the app will be deployed into the `dev` namespace\nin your Kubernetes or OpenShift cluster. You can now access the app to test it.\n\n- To access the app, retrieve the app ingress endpoint using command below\n    ```bash\n    igc ingress -n dev\n    ```\n  \n  You will see a list of apps displayed with their ingress URLs\n    ```bash\n    Host(s):\n    [\n      'http://stockbffnode-dev.showcase-dev-iks-cluster.us-south.containers.appdomain.cloud'\n    ]\n\n- Open this ingress URL in your browser and validate the app is working as expected\n\nThis completes the deployment of your first app.\n\n### Complete the setup\n\nYou now have a running application that is being built and deployed into your development cluster.\nThe next step is to prepare for Continuous Delivery, Code Analysis, and Artifact Management.\n\nTo enable this, follow these instructions to complete the setup of the **ArgoCD** and **Artifactory**:\n\n<AnchorLinks small>\n  <AnchorLink to=\"/getting-started/argocd-setup\">ArgoCD Setup</AnchorLink>\n  <AnchorLink to=\"/getting-started/artifactory-setup\">Artifactory Setup</AnchorLink>\n</AnchorLinks>\n\n\n## Guides\n\nFor more detailed instructions of how to enable to the full developer lifecycle read through the **Guides** section.\n\n<AnchorLinks small>\n  <AnchorLink to=\"/guides/overview\">Guides</AnchorLink>\n  <AnchorLink to=\"/starterkits/overview\">Starter Kit Templates</AnchorLink>\n</AnchorLinks>\n","fileAbsolutePath":"/Users/mjperrins/projects/cat/guide/src/pages/getting-started/deploy-app/index.mdx"}}}}