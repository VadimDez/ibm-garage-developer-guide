{"componentChunkName":"component---src-pages-getting-started-deploy-app-index-mdx","path":"/getting-started/deploy-app/","result":{"pageContext":{"isCreatedByStatefulCreatePages":true,"frontmatter":{"title":"Deploying First App"},"relativePagePath":"/getting-started/deploy-app/index.mdx","titleType":"page","MdxNode":{"id":"046a3dd8-4e0b-542e-9ef7-fd8578dbf488","children":[],"parent":"645ae19c-cd19-5598-80ef-53310add0c9b","internal":{"content":"---\ntitle: Deploying First App\n---\n\n## Overview\n\nNow that you have prepared your development cluster for cloud-native application development, you can now create a new app using one of the\nStarter Kit Templates. These have been created to include all the key components, configuration, and frameworks to get you started on\ncreating the code you need for your solutions.\n\n## Demonstration video\n\nThis video will demo how to get started with using the Dashboard to develop an app.\n\n<Video src=\"/videos/deployfirstapp.m4v\" type=\"video/m4v\" poster=\"/images/poster.png\"/>\n\n### Open the Developer Tools Dashboard\n\nThe Developer Tools Dashboard makes it easy for you to navigate to the tools and includes a section that\nlists the **Starter Kits Templates**. These templates have been created to give you a more comprehensive\nstarting point for you apps. Read more in the **[Starter Kits](/starterkits/overview)**.\n\n- Install the [IGC CLI](/getting-started/cli)\n- Open the [Developer Tools Dashboard](/getting-started/dashboard)\n- Click on **Starter Kits** tab\n- Pick one of the templates that is a good architectural fit for you application and the language and framework\nthat you prefer to work with. Click on the **Tile** to create a new copy repository from the template repository.\n\n<InlineNotification>\n\nThe templates use the [GitHub Templating feature](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-from-a-template), \nwhich copies the directory structure and files of a template repository into a new repository in your organisation with no git history.\nClick on the tile to create a repository from that template. Click on the **Git Icon** to browse the template repository.\n\n</InlineNotification>\n\n- This will open the the GitHub template copy view. You can see the source git repo displayed\nat the top.\n  - **Owner**: Select a validate GitHub organization that you are authorised to create repositories within\n  - **Repository name**: Enter a valid name for you repo\n  - **Description**: Describe your app\n    ![Template](template.png)\n  - Press **Create repository from template**\n\nThe new repository will be created. Next, clone it to your local machine.\n- Click on **Clone or download**\n- Copy the clone SSH link, and use the `git clone` command to clone it to your developer desktop machine.\n    ```base\n    git clone git@github.com:mjperrins/stockbffnode.git\n    cd stockbffnode\n    ```\n\n### Running Locally\n\nMost developers like to run the code natively in local development environment. Follow the instructions\nlisted in the **README.md** file to run the code locally. They may be requirements to install\nspecific runtime's like **Java**, **Node**, and **Python**.\n\n### Register App Pipeline\n\nNow you have the code in a GitHub repository and cloned to you local development environment.\nWe can now register the repository with Continuous Integration pipeline technology. \n\nThe default CI pipeline tool is currently **Jenkins**. (Tekton support will be coming soon.)\nWe use the [IGC CLI](/getting-started/cli) to assist with these steps.\n\n- You will need a [GitHub personal access token](https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line) \nwith [`read:org` scope](https://wiki.jenkins.io/display/JENKINS/GitHub+OAuth+Plugin#GitHubOAuthPlugin-CallingJenkinsAPIusingGitHubPersonalAccessTokens) \nand `repo` scope.\n\n  - Navigate to [Developer Settings](https://github.com/settings/tokens) and generate a new token. \n  Jenkins will use this token to access the code in your repo.\n  - Save the token and place it in your clipboard.\n\n- To register the app follow these steps.\n    ```bash\n    $ igc pipeline\n    Project git repo: https://github.com/mjperrins/stockbffnode.git\n    ? Provide the username: mperrins\n    ? Please provide your password/personal access token: [hidden]\n    ? Please provide the branch the pipeline should use: master\n    Creating secret with git credentials\n    Registering pipeline\n    Creating git webhook\n    ```\n- Enter your GitHub user id, paste your personal access token, and select the default git branch or type\nin another branch you want to register.\n\n  The pipeline will be registered.\n\n\n### View App Pipeline\n\nUsing the Developer Tools Dashboard, open the Jenkins dashboard. If you already have it open, \nrefresh the page.\n\n<InlineNotification>\n\nNote: You will have to log into the Jenkins dashboard. To get the username and password, \nrun `igc credentials` using the [IGC CLI](getting-started/cli).\n\n</InlineNotification>\n\n- You will see you pipeline registered.\n\n- Click on your app pipeline and click **Build Now**.\n\n- Wait for the pipeline stages to start building.\n\n- Once the stages have completed, you should see a view similar to the one below.\n\n![Jenkins Pipeline](pipeline.png)\n\n### Access running App\n\nOnce the pipeline has completed successfully, the app will be deployed into the `dev` namespace\nin Kubernetes or Openshift. You can now access the app to test it.\n\n- To access the app, retrieve the app ingress endpoint using command below.\n    ```bash\n    igc ingress -n dev\n    ```\n- You will see a list of apps displayed with their ingress URLs.\n    ```bash\n    Host(s):\n    [\n      'http://stockbffnode-dev.showcase-dev-iks-cluster.us-south.containers.appdomain.cloud'\n    ]\n\n- Open this ingress URL in your browser and validate the app is working as expected.\n\n- This completes the deployment of your first app.\n\n### What's Next\n\nNow you have a running application that is being built and deployed into your development cluster.\nThe next step is to prepare for Continuous Delivery, Code Analysis, and Artifact Management.\n\nTo enable this, follow these instructions to complete the setup of the **ArgoCD** and **Artifactory**:\n\n<AnchorLinks small>\n  <AnchorLink to=\"/getting-started/argocd-setup\">ArgoCD Setup</AnchorLink>\n  <AnchorLink to=\"/getting-started/artifactory-setup\">Artifactory Setup</AnchorLink>\n</AnchorLinks>\n\n\n## Guides\n\nFor more detailed instructions of how to enable to the full developer lifecycle read through the **Guides** section.\n\n<AnchorLinks small>\n  <AnchorLink to=\"/guides/overview\">Guides</AnchorLink>\n  <AnchorLink to=\"/starterkits/overview\">Starter Kit Templates</AnchorLink>\n\n</AnchorLinks>\n","type":"Mdx","contentDigest":"fb47f37c3815a50b586630df6ac1cf53","counter":492,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Deploying First App"},"exports":{},"rawBody":"---\ntitle: Deploying First App\n---\n\n## Overview\n\nNow that you have prepared your development cluster for cloud-native application development, you can now create a new app using one of the\nStarter Kit Templates. These have been created to include all the key components, configuration, and frameworks to get you started on\ncreating the code you need for your solutions.\n\n## Demonstration video\n\nThis video will demo how to get started with using the Dashboard to develop an app.\n\n<Video src=\"/videos/deployfirstapp.m4v\" type=\"video/m4v\" poster=\"/images/poster.png\"/>\n\n### Open the Developer Tools Dashboard\n\nThe Developer Tools Dashboard makes it easy for you to navigate to the tools and includes a section that\nlists the **Starter Kits Templates**. These templates have been created to give you a more comprehensive\nstarting point for you apps. Read more in the **[Starter Kits](/starterkits/overview)**.\n\n- Install the [IGC CLI](/getting-started/cli)\n- Open the [Developer Tools Dashboard](/getting-started/dashboard)\n- Click on **Starter Kits** tab\n- Pick one of the templates that is a good architectural fit for you application and the language and framework\nthat you prefer to work with. Click on the **Tile** to create a new copy repository from the template repository.\n\n<InlineNotification>\n\nThe templates use the [GitHub Templating feature](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-from-a-template), \nwhich copies the directory structure and files of a template repository into a new repository in your organisation with no git history.\nClick on the tile to create a repository from that template. Click on the **Git Icon** to browse the template repository.\n\n</InlineNotification>\n\n- This will open the the GitHub template copy view. You can see the source git repo displayed\nat the top.\n  - **Owner**: Select a validate GitHub organization that you are authorised to create repositories within\n  - **Repository name**: Enter a valid name for you repo\n  - **Description**: Describe your app\n    ![Template](template.png)\n  - Press **Create repository from template**\n\nThe new repository will be created. Next, clone it to your local machine.\n- Click on **Clone or download**\n- Copy the clone SSH link, and use the `git clone` command to clone it to your developer desktop machine.\n    ```base\n    git clone git@github.com:mjperrins/stockbffnode.git\n    cd stockbffnode\n    ```\n\n### Running Locally\n\nMost developers like to run the code natively in local development environment. Follow the instructions\nlisted in the **README.md** file to run the code locally. They may be requirements to install\nspecific runtime's like **Java**, **Node**, and **Python**.\n\n### Register App Pipeline\n\nNow you have the code in a GitHub repository and cloned to you local development environment.\nWe can now register the repository with Continuous Integration pipeline technology. \n\nThe default CI pipeline tool is currently **Jenkins**. (Tekton support will be coming soon.)\nWe use the [IGC CLI](/getting-started/cli) to assist with these steps.\n\n- You will need a [GitHub personal access token](https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line) \nwith [`read:org` scope](https://wiki.jenkins.io/display/JENKINS/GitHub+OAuth+Plugin#GitHubOAuthPlugin-CallingJenkinsAPIusingGitHubPersonalAccessTokens) \nand `repo` scope.\n\n  - Navigate to [Developer Settings](https://github.com/settings/tokens) and generate a new token. \n  Jenkins will use this token to access the code in your repo.\n  - Save the token and place it in your clipboard.\n\n- To register the app follow these steps.\n    ```bash\n    $ igc pipeline\n    Project git repo: https://github.com/mjperrins/stockbffnode.git\n    ? Provide the username: mperrins\n    ? Please provide your password/personal access token: [hidden]\n    ? Please provide the branch the pipeline should use: master\n    Creating secret with git credentials\n    Registering pipeline\n    Creating git webhook\n    ```\n- Enter your GitHub user id, paste your personal access token, and select the default git branch or type\nin another branch you want to register.\n\n  The pipeline will be registered.\n\n\n### View App Pipeline\n\nUsing the Developer Tools Dashboard, open the Jenkins dashboard. If you already have it open, \nrefresh the page.\n\n<InlineNotification>\n\nNote: You will have to log into the Jenkins dashboard. To get the username and password, \nrun `igc credentials` using the [IGC CLI](getting-started/cli).\n\n</InlineNotification>\n\n- You will see you pipeline registered.\n\n- Click on your app pipeline and click **Build Now**.\n\n- Wait for the pipeline stages to start building.\n\n- Once the stages have completed, you should see a view similar to the one below.\n\n![Jenkins Pipeline](pipeline.png)\n\n### Access running App\n\nOnce the pipeline has completed successfully, the app will be deployed into the `dev` namespace\nin Kubernetes or Openshift. You can now access the app to test it.\n\n- To access the app, retrieve the app ingress endpoint using command below.\n    ```bash\n    igc ingress -n dev\n    ```\n- You will see a list of apps displayed with their ingress URLs.\n    ```bash\n    Host(s):\n    [\n      'http://stockbffnode-dev.showcase-dev-iks-cluster.us-south.containers.appdomain.cloud'\n    ]\n\n- Open this ingress URL in your browser and validate the app is working as expected.\n\n- This completes the deployment of your first app.\n\n### What's Next\n\nNow you have a running application that is being built and deployed into your development cluster.\nThe next step is to prepare for Continuous Delivery, Code Analysis, and Artifact Management.\n\nTo enable this, follow these instructions to complete the setup of the **ArgoCD** and **Artifactory**:\n\n<AnchorLinks small>\n  <AnchorLink to=\"/getting-started/argocd-setup\">ArgoCD Setup</AnchorLink>\n  <AnchorLink to=\"/getting-started/artifactory-setup\">Artifactory Setup</AnchorLink>\n</AnchorLinks>\n\n\n## Guides\n\nFor more detailed instructions of how to enable to the full developer lifecycle read through the **Guides** section.\n\n<AnchorLinks small>\n  <AnchorLink to=\"/guides/overview\">Guides</AnchorLink>\n  <AnchorLink to=\"/starterkits/overview\">Starter Kit Templates</AnchorLink>\n\n</AnchorLinks>\n","fileAbsolutePath":"/Users/bwoolf/dev/git/ibm-garage-cloud/ibm-garage-developer-guide/src/pages/getting-started/deploy-app/index.mdx"}}}}