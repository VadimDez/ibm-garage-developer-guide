{"componentChunkName":"component---src-pages-getting-started-artifactory-setup-index-mdx","path":"/getting-started/artifactory-setup/","result":{"pageContext":{"isCreatedByStatefulCreatePages":true,"frontmatter":{"title":"Artifactory Setup"},"relativePagePath":"/getting-started/artifactory-setup/index.mdx","titleType":"page","MdxNode":{"id":"39031be5-557c-530f-b066-f506dfbf389a","children":[],"parent":"2c3fbf1d-60f8-5bbc-a0ee-57fb41984356","internal":{"content":"---\ntitle: Artifactory Setup\n---\n\n<PageDescription>\n\nComplete the steps for setting up Artifactory for use with development pipelines\n\n</PageDescription>\n\n## Overview\n\nArtifactory is a general purpose artifact storage service. The \n[IBM Cloud Container Registry](https://cloud.ibm.com/docs/services/Registry) \nstores Docker images, but has no support for storing other types of binary artifacts such as Maven project files, \nGradle jar files, NPM modules, and Helm charts. \nIn the Developer Tools environment, Jenkins and ArgoCD use Artifactory as a \n[Helm chart repository](https://helm.sh/docs/chart_repository/), \nand the Starter Kit Templates have also been configured to store their Helm charts in Artificatory.\n\nArtifactory is part of the Developer Tools environment's complete CI/CD solution:\n\n<AnchorLinks small>\n  <AnchorLink to=\"/guides/continuous-integration\">Continuous Integration</AnchorLink>\n  <AnchorLink to=\"/guides/continuous-deployment\">Continuous Deployment</AnchorLink>\n</AnchorLinks>\n\n##  Configuration\n\nArtifactory in the Developer Tools environment needs to be configured with a Helm repository.\nAlso, the Developer Tools environment needs to be configured to access Artifactory.\n\n### Set up Artifactory\n\nCreate a repository in Artifactory for storing Helm charts.\n\n- Open Artifactory from the [Developer Tools Dashboard](/getting-started/dashboard) and login\n\nThe first time you log into Artifactory, it is unconfigured and displays its Onboarding Wizard, starting with the Welcome page.\n\n- Press **Next**\n\n<ArtDirection>\n\n![Initial JFrog](/images/initialjfrog.png)\n\n</ArtDirection>\n\nThe next page in the wizard is the Configure a Proxy Server page. This is to setup a proxy for external resources. You can skip this\nstep.\n\n- Press **Skip**\n\n<ArtDirection>\n\n![Initial JFrog](/images/setupproxy.png)\n\n</ArtDirection>\n\nThe next page in the wizard is the Create Repositories page. Since Artifactory doesn't have a specific package type for Helm charts, we'll set up the repository for storing generic artifacts.\n\n- Select **Generic**, then press **Create**\n\n<ArtDirection>\n\n![Initial JFrog](/images/createrepository.png)\n\n</ArtDirection>\n\nThe next page in the wizard is the Onboarding Complete page. \n\n- Press **Finish**\n\n<ArtDirection>\n\n![Initial JFrog](/images/completejfrog.png)\n\n</ArtDirection>\n\n### Obtain encrypted password\n\nTo enable the Jenkins pipelines to store the Helm artifacts in the Artifactory repository, we need to obtain \nArtifactory's encrypted password and store this where Jenkins can access it--in the `artifactory-access` Kubernetes secret in the `tools` namespace in the Development Tools environment.\n\n- In the Artifactory console, press the **Welcome, admin** menu button in the top right corner of the console and select **Edit profile**\n\n- In the User Profile: admin page, enter you Artifactory password and press **Unlock**\n\n<ArtDirection>\n\n![Initial JFrog](/images/jfrogapikey.png)\n\n</ArtDirection>\n\nBelow, in the **Authentication Settings** section, is the **Encrypted Password** field.\n\n- Press the **Eye** icon to view the encrypted password and press the **Cut & Paste** icon to copy it\n\n<ArtDirection>\n\n![Initial JFrog](/images/viewapikey.png)\n\n</ArtDirection>\n\n[Kubernetes secrets](https://kubernetes.io/docs/concepts/configuration/secret/#creating-a-secret-manually) \nstore data in base64 format. So to store Artifactory's encrypted password in a secret, it needs to be encoded into base64.\n\nAny base64 encoding tool will work. For example:\n\n- Go to the [Base64 Encode](https://www.base64encode.org/) website\n\n- Paste the encrypted password into the online tool and press the **Encode** button\n\n- In the field below, copy the encoded value into you clipboard or store it somewhere safe\n\n### Update the Kubernetes secret\n\nStore the base64 encrypted password for Artifactory in the Kubernetes secret for accessing Artifactory.\n\n- Open your Development Tools environment's Kubernetes Console or OpenShift Console\n\n- Navigate to the `tools` namespace and `secrets` view\n\n- Find the secret named `artifactory-access` and open it in the Edit view\n\n<Row>\n<Column colMd={4} colLg={5} noGutterMdLeft>\n\n## OpenShift\n<ArtDirection>\n\n\n![Initial JFrog](/images/addkeytosecret.png)\n\n</ArtDirection>\n\n</Column>\n<Column colMd={4} colLg={6} noGutterMdLeft>\n\n## Kubernetes\n<ArtDirection>\n\n![Initial JFrog](/images/kubeaddkeytosecret.png)\n\n</ArtDirection>\n\n</Column>\n</Row>\n\n- Find the `ARTIFACTORY_ENCRPT` value (under `data`) and paste in the Artifactory base64 key into the field\n\n- Press **Save** in OpenShift Console or **Update** in Kubernetes Dashboard\n\n- View the secret in the console and confirm that the visible value of `ARTIFACTORY_ENCRPT` matches the encrypted password shown in the Artifactory console\n\n## Rerun the Pipeline\n\nPreviously, when you deployed you first app, the pipeline's Package Helm Chart stage didn't store the chart because \nthe `ARTIFACTORY_ENCRPT` property was not set. Now that it is set, rerun your pipeline and check that the Helm chart for you app is stored correctly in Artifactory with matching semantic version information.\n\n- In the Artifactory console, select the Artifacts page and expand the `generic-local` repository\n\nYou should see a folder named after your resource group containing the tar file for a Helm chart.\n\n<ArtDirection>\n\n![Artifact Repository Browser](/images/artifact-repo-browser.png)\n\n</ArtDirection>\n\n## Conclusion\n\nArtifactory is now set up in your Developer Tools environment and Jenkins pipelines can store Helm charts in Artifactory repository. \n","type":"Mdx","contentDigest":"460624e455e569073b831afe5d5bc209","counter":244,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Artifactory Setup"},"exports":{},"rawBody":"---\ntitle: Artifactory Setup\n---\n\n<PageDescription>\n\nComplete the steps for setting up Artifactory for use with development pipelines\n\n</PageDescription>\n\n## Overview\n\nArtifactory is a general purpose artifact storage service. The \n[IBM Cloud Container Registry](https://cloud.ibm.com/docs/services/Registry) \nstores Docker images, but has no support for storing other types of binary artifacts such as Maven project files, \nGradle jar files, NPM modules, and Helm charts. \nIn the Developer Tools environment, Jenkins and ArgoCD use Artifactory as a \n[Helm chart repository](https://helm.sh/docs/chart_repository/), \nand the Starter Kit Templates have also been configured to store their Helm charts in Artificatory.\n\nArtifactory is part of the Developer Tools environment's complete CI/CD solution:\n\n<AnchorLinks small>\n  <AnchorLink to=\"/guides/continuous-integration\">Continuous Integration</AnchorLink>\n  <AnchorLink to=\"/guides/continuous-deployment\">Continuous Deployment</AnchorLink>\n</AnchorLinks>\n\n##  Configuration\n\nArtifactory in the Developer Tools environment needs to be configured with a Helm repository.\nAlso, the Developer Tools environment needs to be configured to access Artifactory.\n\n### Set up Artifactory\n\nCreate a repository in Artifactory for storing Helm charts.\n\n- Open Artifactory from the [Developer Tools Dashboard](/getting-started/dashboard) and login\n\nThe first time you log into Artifactory, it is unconfigured and displays its Onboarding Wizard, starting with the Welcome page.\n\n- Press **Next**\n\n<ArtDirection>\n\n![Initial JFrog](/images/initialjfrog.png)\n\n</ArtDirection>\n\nThe next page in the wizard is the Configure a Proxy Server page. This is to setup a proxy for external resources. You can skip this\nstep.\n\n- Press **Skip**\n\n<ArtDirection>\n\n![Initial JFrog](/images/setupproxy.png)\n\n</ArtDirection>\n\nThe next page in the wizard is the Create Repositories page. Since Artifactory doesn't have a specific package type for Helm charts, we'll set up the repository for storing generic artifacts.\n\n- Select **Generic**, then press **Create**\n\n<ArtDirection>\n\n![Initial JFrog](/images/createrepository.png)\n\n</ArtDirection>\n\nThe next page in the wizard is the Onboarding Complete page. \n\n- Press **Finish**\n\n<ArtDirection>\n\n![Initial JFrog](/images/completejfrog.png)\n\n</ArtDirection>\n\n### Obtain encrypted password\n\nTo enable the Jenkins pipelines to store the Helm artifacts in the Artifactory repository, we need to obtain \nArtifactory's encrypted password and store this where Jenkins can access it--in the `artifactory-access` Kubernetes secret in the `tools` namespace in the Development Tools environment.\n\n- In the Artifactory console, press the **Welcome, admin** menu button in the top right corner of the console and select **Edit profile**\n\n- In the User Profile: admin page, enter you Artifactory password and press **Unlock**\n\n<ArtDirection>\n\n![Initial JFrog](/images/jfrogapikey.png)\n\n</ArtDirection>\n\nBelow, in the **Authentication Settings** section, is the **Encrypted Password** field.\n\n- Press the **Eye** icon to view the encrypted password and press the **Cut & Paste** icon to copy it\n\n<ArtDirection>\n\n![Initial JFrog](/images/viewapikey.png)\n\n</ArtDirection>\n\n[Kubernetes secrets](https://kubernetes.io/docs/concepts/configuration/secret/#creating-a-secret-manually) \nstore data in base64 format. So to store Artifactory's encrypted password in a secret, it needs to be encoded into base64.\n\nAny base64 encoding tool will work. For example:\n\n- Go to the [Base64 Encode](https://www.base64encode.org/) website\n\n- Paste the encrypted password into the online tool and press the **Encode** button\n\n- In the field below, copy the encoded value into you clipboard or store it somewhere safe\n\n### Update the Kubernetes secret\n\nStore the base64 encrypted password for Artifactory in the Kubernetes secret for accessing Artifactory.\n\n- Open your Development Tools environment's Kubernetes Console or OpenShift Console\n\n- Navigate to the `tools` namespace and `secrets` view\n\n- Find the secret named `artifactory-access` and open it in the Edit view\n\n<Row>\n<Column colMd={4} colLg={5} noGutterMdLeft>\n\n## OpenShift\n<ArtDirection>\n\n\n![Initial JFrog](/images/addkeytosecret.png)\n\n</ArtDirection>\n\n</Column>\n<Column colMd={4} colLg={6} noGutterMdLeft>\n\n## Kubernetes\n<ArtDirection>\n\n![Initial JFrog](/images/kubeaddkeytosecret.png)\n\n</ArtDirection>\n\n</Column>\n</Row>\n\n- Find the `ARTIFACTORY_ENCRPT` value (under `data`) and paste in the Artifactory base64 key into the field\n\n- Press **Save** in OpenShift Console or **Update** in Kubernetes Dashboard\n\n- View the secret in the console and confirm that the visible value of `ARTIFACTORY_ENCRPT` matches the encrypted password shown in the Artifactory console\n\n## Rerun the Pipeline\n\nPreviously, when you deployed you first app, the pipeline's Package Helm Chart stage didn't store the chart because \nthe `ARTIFACTORY_ENCRPT` property was not set. Now that it is set, rerun your pipeline and check that the Helm chart for you app is stored correctly in Artifactory with matching semantic version information.\n\n- In the Artifactory console, select the Artifacts page and expand the `generic-local` repository\n\nYou should see a folder named after your resource group containing the tar file for a Helm chart.\n\n<ArtDirection>\n\n![Artifact Repository Browser](/images/artifact-repo-browser.png)\n\n</ArtDirection>\n\n## Conclusion\n\nArtifactory is now set up in your Developer Tools environment and Jenkins pipelines can store Helm charts in Artifactory repository. \n","fileAbsolutePath":"/Users/seansund/ws/catalyst/garage-developer-guide/src/pages/getting-started/artifactory-setup/index.mdx"}}}}