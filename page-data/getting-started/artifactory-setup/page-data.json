{"componentChunkName":"component---src-pages-getting-started-artifactory-setup-index-mdx","path":"/getting-started/artifactory-setup/","webpackCompilationHash":"7bcf4f17f2fc54b1ee46","result":{"pageContext":{"isCreatedByStatefulCreatePages":true,"frontmatter":{"title":"Artifactory Setup","description":"Complete the setups for setting up Artifactory for use with development pipelines"},"relativePagePath":"/getting-started/artifactory-setup/index.mdx","titleType":"page","MdxNode":{"id":"9f00c4ec-4a09-5e95-b685-e124d75df234","children":[],"parent":"a75f33d9-ac5c-5b3b-b799-1c670010c449","internal":{"content":"---\ntitle: Artifactory Setup\ndescription: Complete the setups for setting up Artifactory for use with development pipelines\n---\n\n## Overview\n\nArtifactory is a general purpose artifact storage service. The IBM Cloud supports storing docker images but has no support for\nstoring other types of binary artifacts from Maven, Gradle jar files, NPM modules and for Helm Charts. ArgoCD uses Artifactory\nas a Helm Repository and the Starter Kit Templates have been configured to store their Helm charts in Artificatory once this\nsetup is complete.\n\nRead the following guides to understand how to use it to create combined CI/CD solution read the following guides:\n\n<AnchorLinks small>\n  <AnchorLink to=\"/guides/continuous-integration\">Continuous Integration</AnchorLink>\n  <AnchorLink to=\"/guides/continuous-deployment\">Continuous Deployment</AnchorLink>\n</AnchorLinks>\n\n##  Configuration\n\nTo enable Artifactory to work seamlessly with the Developer Tools installation you need to configure Artifactory to\nbe used as a Helm Chart Repository.\n\n- Open Artifactory from the Developer Dashboard and login.\n\nWhen you first login into Artifactory you will see it is not configure you will see this dialog.\n\n<ArtDirection>\n\n![Initial JFrog](/images/initialjfrog.png)\n\n</ArtDirection>\n\n- Click **Next**\n\nYou will see the next view of the wizard will be asking to setup a proxy for external resource, you can skip this\nstep.\n\n<ArtDirection>\n\n![Initial JFrog](/images/setupproxy.png)\n\n</ArtDirection>\n\n- Click **Skip**\n\nThe next view allows you to select the type of repository. The enable Artifactory to be used as a Helm Repository\nselect **Generic**.\n\n<ArtDirection>\n\n![Initial JFrog](/images/createrepository.png)\n\n</ArtDirection>\n\n- Then select **Create**\n\nYou  will see the **Artifactory on-boarding complete!** message\n\n<ArtDirection>\n\n![Initial JFrog](/images/completejfrog.png)\n\n</ArtDirection>\n\n- Click **Complete* to finish creating the repository\n\n## Obtaining Encryption Key\n\nTo enable the Pipelines to store the Helm artifacts in Artifactory Repository we need to obtain the Encryption key\nfrom the settings and configure this into the `artifactory-access` Kubernetes secret in the `tools` namespace in the Development Cluster.\n\n- In the logged in Artifactory console click **Welcome,Admin** menu in the top right corner of the console.\n\n<ArtDirection>\n\n![Initial JFrog](/images/jfrogapikey.png)\n\n</ArtDirection>\n\n- enter you Artifactory password and click **Unlock**\n\nYou will see below an area call **Authentication Settings** and inside it a field called **Encrypted Password**\n\n<ArtDirection>\n\n![Initial JFrog](/images/viewapikey.png)\n\n</ArtDirection>\n\n- Click on **Eye Icon** to view the password and click on the **Cut & Paste Icon** to copy it\n\nYou will now need to open a `encode64` utility use this online tool [Encode64](https://www.base64encode.org/)\n\n- Paste the password into the online tool and click **Encode** button\n\n- In the view below copy the encoded value into you clip board or store it somewhere safe\n\n## Updating Kubernetes Secrets\n\nLog into you Development Cluster Kubernetes Console or OpenShift Console.\n\n- Navigate to the `tools` namespace and `secrets` view in Kubernetes Console or Openshift Console.\n\n- Find the `secret` labelled `artifactory-access` and open it in the Edit view.\n\n<Row>\n<Column colMd={4} colLg={5} noGutterMdLeft>\n\n## OpenShift\n<ArtDirection>\n\n\n![Initial JFrog](/images/addkeytosecret.png)\n\n</ArtDirection>\n\n</Column>\n<Column colMd={4} colLg={6} noGutterMdLeft>\n\n## Kubernetes\n<ArtDirection>\n\n![Initial JFrog](/images/kubeaddkeytosecret.png)\n\n</ArtDirection>\n\n</Column>\n</Row>\n\n- Find the `ARTIFACTORY_ENCRPT` value and paste in the Artifactory encryption key into the field\n\n- Click **Save** in OpenShift Console and **Update** in Kubernetes Console\n\n- Then view the secret in the console and check the visible value matches the value in the Artifactory console.\n\n## Re-Run the Pipeline\n\nIf you have deployed you first app. The pipeline will have ignored the Publish to Helm stage as the `ARTIFACTORY_ENCRPT`\nwas not set, now it is you should rerun your pipeline and check that the Helm Chart for you app is stored correctly\nin Artifactory with matching semantic version information.\n\n- Open Artifactory expand the `generic-local`\n\n<ArtDirection>\n\n![Initial JFrog](/images/kubeaddkeytosecret.png)\n\n</ArtDirection>\n\n\n\n\n\n\n\n\n","type":"Mdx","contentDigest":"8ac73b932f760e36adf3dee4672b43a9","counter":367,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Artifactory Setup","description":"Complete the setups for setting up Artifactory for use with development pipelines"},"exports":{},"rawBody":"---\ntitle: Artifactory Setup\ndescription: Complete the setups for setting up Artifactory for use with development pipelines\n---\n\n## Overview\n\nArtifactory is a general purpose artifact storage service. The IBM Cloud supports storing docker images but has no support for\nstoring other types of binary artifacts from Maven, Gradle jar files, NPM modules and for Helm Charts. ArgoCD uses Artifactory\nas a Helm Repository and the Starter Kit Templates have been configured to store their Helm charts in Artificatory once this\nsetup is complete.\n\nRead the following guides to understand how to use it to create combined CI/CD solution read the following guides:\n\n<AnchorLinks small>\n  <AnchorLink to=\"/guides/continuous-integration\">Continuous Integration</AnchorLink>\n  <AnchorLink to=\"/guides/continuous-deployment\">Continuous Deployment</AnchorLink>\n</AnchorLinks>\n\n##  Configuration\n\nTo enable Artifactory to work seamlessly with the Developer Tools installation you need to configure Artifactory to\nbe used as a Helm Chart Repository.\n\n- Open Artifactory from the Developer Dashboard and login.\n\nWhen you first login into Artifactory you will see it is not configure you will see this dialog.\n\n<ArtDirection>\n\n![Initial JFrog](/images/initialjfrog.png)\n\n</ArtDirection>\n\n- Click **Next**\n\nYou will see the next view of the wizard will be asking to setup a proxy for external resource, you can skip this\nstep.\n\n<ArtDirection>\n\n![Initial JFrog](/images/setupproxy.png)\n\n</ArtDirection>\n\n- Click **Skip**\n\nThe next view allows you to select the type of repository. The enable Artifactory to be used as a Helm Repository\nselect **Generic**.\n\n<ArtDirection>\n\n![Initial JFrog](/images/createrepository.png)\n\n</ArtDirection>\n\n- Then select **Create**\n\nYou  will see the **Artifactory on-boarding complete!** message\n\n<ArtDirection>\n\n![Initial JFrog](/images/completejfrog.png)\n\n</ArtDirection>\n\n- Click **Complete* to finish creating the repository\n\n## Obtaining Encryption Key\n\nTo enable the Pipelines to store the Helm artifacts in Artifactory Repository we need to obtain the Encryption key\nfrom the settings and configure this into the `artifactory-access` Kubernetes secret in the `tools` namespace in the Development Cluster.\n\n- In the logged in Artifactory console click **Welcome,Admin** menu in the top right corner of the console.\n\n<ArtDirection>\n\n![Initial JFrog](/images/jfrogapikey.png)\n\n</ArtDirection>\n\n- enter you Artifactory password and click **Unlock**\n\nYou will see below an area call **Authentication Settings** and inside it a field called **Encrypted Password**\n\n<ArtDirection>\n\n![Initial JFrog](/images/viewapikey.png)\n\n</ArtDirection>\n\n- Click on **Eye Icon** to view the password and click on the **Cut & Paste Icon** to copy it\n\nYou will now need to open a `encode64` utility use this online tool [Encode64](https://www.base64encode.org/)\n\n- Paste the password into the online tool and click **Encode** button\n\n- In the view below copy the encoded value into you clip board or store it somewhere safe\n\n## Updating Kubernetes Secrets\n\nLog into you Development Cluster Kubernetes Console or OpenShift Console.\n\n- Navigate to the `tools` namespace and `secrets` view in Kubernetes Console or Openshift Console.\n\n- Find the `secret` labelled `artifactory-access` and open it in the Edit view.\n\n<Row>\n<Column colMd={4} colLg={5} noGutterMdLeft>\n\n## OpenShift\n<ArtDirection>\n\n\n![Initial JFrog](/images/addkeytosecret.png)\n\n</ArtDirection>\n\n</Column>\n<Column colMd={4} colLg={6} noGutterMdLeft>\n\n## Kubernetes\n<ArtDirection>\n\n![Initial JFrog](/images/kubeaddkeytosecret.png)\n\n</ArtDirection>\n\n</Column>\n</Row>\n\n- Find the `ARTIFACTORY_ENCRPT` value and paste in the Artifactory encryption key into the field\n\n- Click **Save** in OpenShift Console and **Update** in Kubernetes Console\n\n- Then view the secret in the console and check the visible value matches the value in the Artifactory console.\n\n## Re-Run the Pipeline\n\nIf you have deployed you first app. The pipeline will have ignored the Publish to Helm stage as the `ARTIFACTORY_ENCRPT`\nwas not set, now it is you should rerun your pipeline and check that the Helm Chart for you app is stored correctly\nin Artifactory with matching semantic version information.\n\n- Open Artifactory expand the `generic-local`\n\n<ArtDirection>\n\n![Initial JFrog](/images/kubeaddkeytosecret.png)\n\n</ArtDirection>\n\n\n\n\n\n\n\n\n","fileAbsolutePath":"/Users/mjperrins/projects/cat/guide/src/pages/getting-started/artifactory-setup/index.mdx"}}}}