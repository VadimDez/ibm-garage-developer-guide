{"componentChunkName":"component---src-pages-getting-started-tools-crc-index-mdx","path":"/getting-started/tools-crc/","result":{"pageContext":{"isCreatedByStatefulCreatePages":true,"frontmatter":{"title":"Existing Red Hat CRC"},"relativePagePath":"/getting-started/tools-crc/index.mdx","titleType":"page","MdxNode":{"id":"02909672-72dd-5786-84b8-61d8ea80a2bf","children":[],"parent":"b567d0d8-1ec5-5ed3-b1f8-d2fd8ac73d43","internal":{"content":"---\ntitle: Existing Red Hat CRC\n---\n\n<Tabs>\n\n<Tab label=\"Pre-requisites\">\n\n<PageDescription>\n\nPrepare to run the scripts that create the environment\n\n</PageDescription>\n\nThe IBM Garage for Cloud Developer Tools facilitate development and deployment of cloud-native applications. \nThey can be hosted in any Kubernetes or OpenShift cluster.\nIn Red Hat CodeReady Containers, the CRC install is the OpenShift cluster. \n\nThese instructions assume that [Red Hat CodeReady Containers has already been installed](installation-crc) \nand explain how to access, configure, and run the scripts to install the Developer Tools into that CRC install. \n\nThe following pre-requisites are required before following the setup instructions:\n\n- An installation of Red Hat CodeReady Containers\n- [Docker Desktop](https://www.docker.com/products/docker-desktop) installed and running on your local machine\n- [Node](https://nodejs.org/en/) installed on your local machine\n\n</Tab>\n\n<Tab label=\"1. Download\">\n\n<PageDescription>\n\nObtain the scripts that create the environment\n\n</PageDescription>\n\nClone the [ibm-garage-iteration-zero](https://github.com/ibm-garage-cloud/ibm-garage-iteration-zero) Git repository to your local filesystem\n\n```bash\ngit clone git@github.com:ibm-garage-cloud/ibm-garage-iteration-zero.git\n```\n\nSwitch to the cloned directory\n\n```bash\ncd ibm-garage-iteration-zero\n```\n</Tab>\n\n<Tab label=\"2. API keys\">\n\n<PageDescription>\n\nConfigure the keys the CLI uses to authenticate\n\n</PageDescription>\n\nAPI keys are not needed to connect to CRC, but the file must still exist.\n\n- Inside the `iteration-zero-ibmcloud` folder, copy `credentials.template` to a file named `credentials.properties`.\n\n```bash\ncd iteration-zero-ibmcloud\ncp credentials.template credentials.properties\n```\n\nJust leave the property values blank, the scripts won't use them.\n\n</Tab>\n\n<Tab label=\"3. Configuration\">\n\n<PageDescription>\n\nConfigure the properties describing the environment\n\n</PageDescription>\n\nThe settings for creating the Developer Tools environment go in two properties files\nin the `./terraform/settings` directory:\n- `environment.tfvars` -- Properties for installing the Developer Tools\n- `vlan.tfvars` -- Properties for creating the cluster\n\nFollow the instructions below to set the existing cluster's details in the `environment.tfvars` file.\nThe `vlan.tfvars` file must exist but will be ignored since the cluster already exists.\n\n### Environment variables\n\nThe `environment.tfvars` properties will be used to install the Development Tools.\n\nTypical values look like this:\n\n```bash\nresource_group_name=\"catalyst-team\"\ncluster_name=\"catalyst-team-cluster\"\n# The type of cluster that will be created/used (kubernetes or openshift)\ncluster_type=\"kubernetes\"\n# Flag indicating if we are using an existing cluster or creating a new one\ncluster_exists=\"false\"\n# Flag indicating if we are using an existing PostgreSQL server or creating a new one\npostgres_server_exists=\"false\"\n```\n\nSet them based on the existing cluster:\n- `resource_group_name` -- Ignored when installing in CRC\n- `cluster_name` -- Ignored when installing in CRC\n- `cluster_exists` -- Set to `\"true\"` for the existing cluster\n- `cluster_type` -- Set to `\"openshift\"` for CRC\n- `postgres_server_exists` -- Ignored when installing in CRC\n\n</Tab>\n\n<Tab label=\"4. Run\">\n\n<PageDescription>\n\nRun the scripts that create the environment\n\n</PageDescription>\n\nHaving configured the `credentials.properties`, `environment.tfvars`, and `vlan.tfvars` properties files, \nwe are now ready to kick off the installation.\n\n- Launch a [Developer Tools Docker container](https://github.com/ibm-garage-cloud/ibm-garage-cli-tools \"Cloud Garage Tools Docker image\").\n\n    Run the following command to run the Docker container:\n\n    ```bash\n    ./launch.sh\n    ```\n\n    This will install the Cloud Garage Tools Docker image and exec shell into the running container. The container will \n    mount the filesystem's `./terraform/` directory as `/home/devops/src/`. Once the Docker container has started and \n    the script has exec shelled into it, you will see an IBM Garage banner. This will help you identify you are running \n    inside the Docker image that has just mounted your file system.\n\n    ```bash\n    % ./launch.sh\n    Cleaning up old container: ibm-garage-cli-tools-abcde\n    Initializing container ibm-garage-cli-tools-abcde from garagecatalyst/ibm-garage-cli-tools:0.0.24\n    d14e378eac5f8080dbaf5466d680396fc36f9fcf9433247409ea9b3a62326ad2\n    Attaching to running container...\n        ________  __  ___   ________                __   ______\n       /  _/ __ )/  |/  /  / ____/ /___  __  ______/ /  / ____/___ __________ _____ ____\n       / // __  / /|_/ /  / /   / / __ \\/ / / / __  /  / / __/ __ `/ ___/ __ `/ __ `/ _ \\\n     _/ // /_/ / /  / /  / /___/ / /_/ / /_/ / /_/ /  / /_/ / /_/ / /  / /_/ / /_/ /  __/\n    /___/_____/_/  /_/   \\____/_/\\____/\\__,_/\\__,_/   \\____/\\__,_/_/   \\__,_/\\__, /\\___/\n                                                                            /____/\n    Run 'image-help' to get a list of available tools, scripts, and ENV properties\n    ```\n\n    The `image-help` command shows what can be done in this conatiner:\n\n    ```bash\n    $ image-help\n    Available env properties (can be overridden for individual commands):\n    > BM_API_KEY - the IBM Cloud api key\n    > REGION - the IBM Cloud region (e.g. us-south)\n    > RESOURCE_GROUP - the IBM Cloud resource group\n    > CLUSTER_NAME - the name of the kubernetes cluster in IBM Cloud\n    > SL_USERNAME - the Classic Infrastructure user name or API user name (e.g. 282165_joe@us.ibm.com)\n    > SL_API_KEY - the Classic Infrastructure api key\n\n    Available tools:\n    > terraform (with helm, kube, and ibm provider plugins)\n    > calicoctl\n    > ibmcloud (with container-service, container-registry, and cloud-databases plugins)\n    > kubectl\n    > kustomize\n    > oc\n    > helm\n    > docker\n    > git\n    > nvm\n    > node (v11.12.0 currently installed)\n    > yo\n\n    Available scripts:\n    > init.sh {BM_API_KEY} {REGION} {RESOURCE_GROUP} {CLUSTER_NAME}\n    > createNamespaces.sh\n    > deleteNamespace.sh\n    > installHelm.sh\n    > cluster-pull-secret-apply.sh\n    > setup-namespace-pull-secrets.sh\n    > checkPodRunning.sh\n    > copy-secret-to-namespace.sh\n    ```\n\n- Create the Developer Tools environment\n\n    The supplied Terraform script is ready to run using the settings in the properties files. \n    You optionally can extend or modify the scripts and tailor them for your project's specific needs.\n\n    Run this script in the container:\n\n    ```bash\n    ./runTerraform.sh\n    ```\n\n    This script will create the Developer Tools environment.\n\n    The script will verify some basic settings and prompt if you want to proceed. After you select **Y** (for yes), \n    the Terraform Apply process will begin to create the infrastructure and services for your environment.\n\n    The existing cluster's contents will be cleaned up to prepare for the terraform \n    process. Any resources in the `tools`, `dev`, `test`, and `staging` namespaces/projects will be deleted.\n\n    The installation process takes about 30 minutes. At the end, you should have your Developer Tools environment \n    fully provisioned and configured. Enjoy!\n\n### Developer Tools environment\n\nOnce the Terraform scripts have finished, you can see the resources that the scripts created.\n\nTo see this:\n- Open the OpenShift web console. You should see:\n    - Namespaces: `tools`, `dev`, `test`, and `staging`\n    - Deployments in the `tools` namespace: `catalyst-dashboard`, `jenkins`, etc.\n\n### Possible issues\n\nIf you find that that the Terraform provisioning has failed, try re-running the `runTerraform.sh` script again. \nThe state will be saved and Terraform will try and apply the configuration to match the desired end state.\n\n</Tab>\n\n</Tabs>\n\n","type":"Mdx","contentDigest":"b804056b4edc86b2f33dc0e4706ede6b","counter":610,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Existing Red Hat CRC"},"exports":{},"rawBody":"---\ntitle: Existing Red Hat CRC\n---\n\n<Tabs>\n\n<Tab label=\"Pre-requisites\">\n\n<PageDescription>\n\nPrepare to run the scripts that create the environment\n\n</PageDescription>\n\nThe IBM Garage for Cloud Developer Tools facilitate development and deployment of cloud-native applications. \nThey can be hosted in any Kubernetes or OpenShift cluster.\nIn Red Hat CodeReady Containers, the CRC install is the OpenShift cluster. \n\nThese instructions assume that [Red Hat CodeReady Containers has already been installed](installation-crc) \nand explain how to access, configure, and run the scripts to install the Developer Tools into that CRC install. \n\nThe following pre-requisites are required before following the setup instructions:\n\n- An installation of Red Hat CodeReady Containers\n- [Docker Desktop](https://www.docker.com/products/docker-desktop) installed and running on your local machine\n- [Node](https://nodejs.org/en/) installed on your local machine\n\n</Tab>\n\n<Tab label=\"1. Download\">\n\n<PageDescription>\n\nObtain the scripts that create the environment\n\n</PageDescription>\n\nClone the [ibm-garage-iteration-zero](https://github.com/ibm-garage-cloud/ibm-garage-iteration-zero) Git repository to your local filesystem\n\n```bash\ngit clone git@github.com:ibm-garage-cloud/ibm-garage-iteration-zero.git\n```\n\nSwitch to the cloned directory\n\n```bash\ncd ibm-garage-iteration-zero\n```\n</Tab>\n\n<Tab label=\"2. API keys\">\n\n<PageDescription>\n\nConfigure the keys the CLI uses to authenticate\n\n</PageDescription>\n\nAPI keys are not needed to connect to CRC, but the file must still exist.\n\n- Inside the `iteration-zero-ibmcloud` folder, copy `credentials.template` to a file named `credentials.properties`.\n\n```bash\ncd iteration-zero-ibmcloud\ncp credentials.template credentials.properties\n```\n\nJust leave the property values blank, the scripts won't use them.\n\n</Tab>\n\n<Tab label=\"3. Configuration\">\n\n<PageDescription>\n\nConfigure the properties describing the environment\n\n</PageDescription>\n\nThe settings for creating the Developer Tools environment go in two properties files\nin the `./terraform/settings` directory:\n- `environment.tfvars` -- Properties for installing the Developer Tools\n- `vlan.tfvars` -- Properties for creating the cluster\n\nFollow the instructions below to set the existing cluster's details in the `environment.tfvars` file.\nThe `vlan.tfvars` file must exist but will be ignored since the cluster already exists.\n\n### Environment variables\n\nThe `environment.tfvars` properties will be used to install the Development Tools.\n\nTypical values look like this:\n\n```bash\nresource_group_name=\"catalyst-team\"\ncluster_name=\"catalyst-team-cluster\"\n# The type of cluster that will be created/used (kubernetes or openshift)\ncluster_type=\"kubernetes\"\n# Flag indicating if we are using an existing cluster or creating a new one\ncluster_exists=\"false\"\n# Flag indicating if we are using an existing PostgreSQL server or creating a new one\npostgres_server_exists=\"false\"\n```\n\nSet them based on the existing cluster:\n- `resource_group_name` -- Ignored when installing in CRC\n- `cluster_name` -- Ignored when installing in CRC\n- `cluster_exists` -- Set to `\"true\"` for the existing cluster\n- `cluster_type` -- Set to `\"openshift\"` for CRC\n- `postgres_server_exists` -- Ignored when installing in CRC\n\n</Tab>\n\n<Tab label=\"4. Run\">\n\n<PageDescription>\n\nRun the scripts that create the environment\n\n</PageDescription>\n\nHaving configured the `credentials.properties`, `environment.tfvars`, and `vlan.tfvars` properties files, \nwe are now ready to kick off the installation.\n\n- Launch a [Developer Tools Docker container](https://github.com/ibm-garage-cloud/ibm-garage-cli-tools \"Cloud Garage Tools Docker image\").\n\n    Run the following command to run the Docker container:\n\n    ```bash\n    ./launch.sh\n    ```\n\n    This will install the Cloud Garage Tools Docker image and exec shell into the running container. The container will \n    mount the filesystem's `./terraform/` directory as `/home/devops/src/`. Once the Docker container has started and \n    the script has exec shelled into it, you will see an IBM Garage banner. This will help you identify you are running \n    inside the Docker image that has just mounted your file system.\n\n    ```bash\n    % ./launch.sh\n    Cleaning up old container: ibm-garage-cli-tools-abcde\n    Initializing container ibm-garage-cli-tools-abcde from garagecatalyst/ibm-garage-cli-tools:0.0.24\n    d14e378eac5f8080dbaf5466d680396fc36f9fcf9433247409ea9b3a62326ad2\n    Attaching to running container...\n        ________  __  ___   ________                __   ______\n       /  _/ __ )/  |/  /  / ____/ /___  __  ______/ /  / ____/___ __________ _____ ____\n       / // __  / /|_/ /  / /   / / __ \\/ / / / __  /  / / __/ __ `/ ___/ __ `/ __ `/ _ \\\n     _/ // /_/ / /  / /  / /___/ / /_/ / /_/ / /_/ /  / /_/ / /_/ / /  / /_/ / /_/ /  __/\n    /___/_____/_/  /_/   \\____/_/\\____/\\__,_/\\__,_/   \\____/\\__,_/_/   \\__,_/\\__, /\\___/\n                                                                            /____/\n    Run 'image-help' to get a list of available tools, scripts, and ENV properties\n    ```\n\n    The `image-help` command shows what can be done in this conatiner:\n\n    ```bash\n    $ image-help\n    Available env properties (can be overridden for individual commands):\n    > BM_API_KEY - the IBM Cloud api key\n    > REGION - the IBM Cloud region (e.g. us-south)\n    > RESOURCE_GROUP - the IBM Cloud resource group\n    > CLUSTER_NAME - the name of the kubernetes cluster in IBM Cloud\n    > SL_USERNAME - the Classic Infrastructure user name or API user name (e.g. 282165_joe@us.ibm.com)\n    > SL_API_KEY - the Classic Infrastructure api key\n\n    Available tools:\n    > terraform (with helm, kube, and ibm provider plugins)\n    > calicoctl\n    > ibmcloud (with container-service, container-registry, and cloud-databases plugins)\n    > kubectl\n    > kustomize\n    > oc\n    > helm\n    > docker\n    > git\n    > nvm\n    > node (v11.12.0 currently installed)\n    > yo\n\n    Available scripts:\n    > init.sh {BM_API_KEY} {REGION} {RESOURCE_GROUP} {CLUSTER_NAME}\n    > createNamespaces.sh\n    > deleteNamespace.sh\n    > installHelm.sh\n    > cluster-pull-secret-apply.sh\n    > setup-namespace-pull-secrets.sh\n    > checkPodRunning.sh\n    > copy-secret-to-namespace.sh\n    ```\n\n- Create the Developer Tools environment\n\n    The supplied Terraform script is ready to run using the settings in the properties files. \n    You optionally can extend or modify the scripts and tailor them for your project's specific needs.\n\n    Run this script in the container:\n\n    ```bash\n    ./runTerraform.sh\n    ```\n\n    This script will create the Developer Tools environment.\n\n    The script will verify some basic settings and prompt if you want to proceed. After you select **Y** (for yes), \n    the Terraform Apply process will begin to create the infrastructure and services for your environment.\n\n    The existing cluster's contents will be cleaned up to prepare for the terraform \n    process. Any resources in the `tools`, `dev`, `test`, and `staging` namespaces/projects will be deleted.\n\n    The installation process takes about 30 minutes. At the end, you should have your Developer Tools environment \n    fully provisioned and configured. Enjoy!\n\n### Developer Tools environment\n\nOnce the Terraform scripts have finished, you can see the resources that the scripts created.\n\nTo see this:\n- Open the OpenShift web console. You should see:\n    - Namespaces: `tools`, `dev`, `test`, and `staging`\n    - Deployments in the `tools` namespace: `catalyst-dashboard`, `jenkins`, etc.\n\n### Possible issues\n\nIf you find that that the Terraform provisioning has failed, try re-running the `runTerraform.sh` script again. \nThe state will be saved and Terraform will try and apply the configuration to match the desired end state.\n\n</Tab>\n\n</Tabs>\n\n","fileAbsolutePath":"/Users/bwoolf/dev/git/ibm-garage-cloud/ibm-garage-developer-guide/src/pages/getting-started/tools-crc/index.mdx"}}}}