{"componentChunkName":"component---src-pages-practical-inventory-index-mdx","path":"/practical/inventory/","result":{"pageContext":{"isCreatedByStatefulCreatePages":true,"frontmatter":{"title":"Inventory Micro App"},"relativePagePath":"/practical/inventory/index.mdx","titleType":"page","MdxNode":{"id":"6da1fa80-ade7-57df-9b45-46e5cd0c2e02","children":[],"parent":"20c6231e-f3ac-56b8-b9b2-61042692971d","internal":{"content":"---\ntitle: Inventory Micro App\n---\n\n<PageDescription>\n\nAn example three tier application architecture you can build and have deployed in IBM Kubernetes service or IBM Red Hat OpenShift in less than an hour using the IBM Garage for Cloud Developer Tools and Starter Kit Templates.\n\n</PageDescription>\n\n## Business Need\n\nIn this guide imagine you have completed a [Enterprise Design Thinking Workshop](https://www.ibm.com/garage/method/practices/think/enterprise-design-thinking/) and the out come is a single **Hill** defining the desired business outcomes. Use the steps below to help deliver this **Hill** quickly and to [Garage Method Best Practices](https://www.ibm.com/garage/method).\n\n## [Hills](https://www.ibm.com/garage/method/practices/think/practice_hills/)\n\n- **Who** Provide an internal web application system that can be used by distribution employees securely from each of the regional warehouses. The warehouses are linked using the public internet.\n\n- **What** Enable a secure web application that will allow the warehouse employees to gain easy access to list of product [SKU](https://en.wikipedia.org/wiki/Stock_keeping_unit) inventory levels and inventory locations.\n\n- **Wow** Make the system appealing and easy to use. Deliver it to the IBM Cloud platform in a short focused [Minimal Viable Product](https://www.ibm.com/garage/method/practices/think/practice_minimum_viable_product/). Use the latest managed container runtimes and DevOps best practices to enable post MVP feature improvements. Simulate a release to a  _Test_ environment.\n\n## [Architecture]()\n\nThe Micro App should be built using a three tier microservices architecture. Each tier will follow a clean separation of concerns. Each app component will be modelled using _Microservices_ and use a number of [polyglot](https://searchsoftwarequality.techtarget.com/definition/polyglot-programming) programming languages and frameworks. Data will be stored in IBM Cloudant and the Micro App will be secured using IBM App ID.\n\n![Architecture](architecture.png)\n\n## [Design]()\n\nThe Micro App should adhere to the following User Interface Design and API and Model Design.\n\nAdd Design here.\n\n## Technical Requirements\n- The Mico App should adhere to the following technical requirements:\n\n    - Polyglot Microservices\n    - Stateless\n    - REST APIs\n    - DevOps with Continous Integration and Delivery\n    - Monitoring and Logging\n    - Code Analysis\n    - App Security\n    - Deployed to Red Hat OpenShift or IBM Kubernetes Managed Service\n    - Follow [Carbon Design System](https://www.carbondesignsystem.com/) User Experience\n\n## Guide\n\nSteps to Go here\n\n\n## Summary\n\nYou have now completed the Micro App Guide demonstrating the _Inventory_ solution.\n\n## Solution Links\n\nIf you want to skip the guide and just get the components running, here are the solution Git Repositories. You can clone these and `igc pipeline` them to register them in the CI pipeline. The **README.md** may include additional setup for populating test data etc.\n\n<AnchorLinks>\n  <AnchorLink to=\"https://github.com/ibm-garage-cloud/inventory-ui\">Inventory User Interface</AnchorLink>\n  <AnchorLink to=\"https://github.com/ibm-garage-cloud/inventory-bff\">Inventory Backend for Frontend</AnchorLink>\n  <AnchorLink to=\"https://github.com/ibm-garage-cloud/inventory-service\">Inventory Microservice</AnchorLink>\n</AnchorLinks>\n\n","type":"Mdx","contentDigest":"75cfa9a9909d1f072518901d6d2b878c","counter":484,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Inventory Micro App"},"exports":{},"rawBody":"---\ntitle: Inventory Micro App\n---\n\n<PageDescription>\n\nAn example three tier application architecture you can build and have deployed in IBM Kubernetes service or IBM Red Hat OpenShift in less than an hour using the IBM Garage for Cloud Developer Tools and Starter Kit Templates.\n\n</PageDescription>\n\n## Business Need\n\nIn this guide imagine you have completed a [Enterprise Design Thinking Workshop](https://www.ibm.com/garage/method/practices/think/enterprise-design-thinking/) and the out come is a single **Hill** defining the desired business outcomes. Use the steps below to help deliver this **Hill** quickly and to [Garage Method Best Practices](https://www.ibm.com/garage/method).\n\n## [Hills](https://www.ibm.com/garage/method/practices/think/practice_hills/)\n\n- **Who** Provide an internal web application system that can be used by distribution employees securely from each of the regional warehouses. The warehouses are linked using the public internet.\n\n- **What** Enable a secure web application that will allow the warehouse employees to gain easy access to list of product [SKU](https://en.wikipedia.org/wiki/Stock_keeping_unit) inventory levels and inventory locations.\n\n- **Wow** Make the system appealing and easy to use. Deliver it to the IBM Cloud platform in a short focused [Minimal Viable Product](https://www.ibm.com/garage/method/practices/think/practice_minimum_viable_product/). Use the latest managed container runtimes and DevOps best practices to enable post MVP feature improvements. Simulate a release to a  _Test_ environment.\n\n## [Architecture]()\n\nThe Micro App should be built using a three tier microservices architecture. Each tier will follow a clean separation of concerns. Each app component will be modelled using _Microservices_ and use a number of [polyglot](https://searchsoftwarequality.techtarget.com/definition/polyglot-programming) programming languages and frameworks. Data will be stored in IBM Cloudant and the Micro App will be secured using IBM App ID.\n\n![Architecture](architecture.png)\n\n## [Design]()\n\nThe Micro App should adhere to the following User Interface Design and API and Model Design.\n\nAdd Design here.\n\n## Technical Requirements\n- The Mico App should adhere to the following technical requirements:\n\n    - Polyglot Microservices\n    - Stateless\n    - REST APIs\n    - DevOps with Continous Integration and Delivery\n    - Monitoring and Logging\n    - Code Analysis\n    - App Security\n    - Deployed to Red Hat OpenShift or IBM Kubernetes Managed Service\n    - Follow [Carbon Design System](https://www.carbondesignsystem.com/) User Experience\n\n## Guide\n\nSteps to Go here\n\n\n## Summary\n\nYou have now completed the Micro App Guide demonstrating the _Inventory_ solution.\n\n## Solution Links\n\nIf you want to skip the guide and just get the components running, here are the solution Git Repositories. You can clone these and `igc pipeline` them to register them in the CI pipeline. The **README.md** may include additional setup for populating test data etc.\n\n<AnchorLinks>\n  <AnchorLink to=\"https://github.com/ibm-garage-cloud/inventory-ui\">Inventory User Interface</AnchorLink>\n  <AnchorLink to=\"https://github.com/ibm-garage-cloud/inventory-bff\">Inventory Backend for Frontend</AnchorLink>\n  <AnchorLink to=\"https://github.com/ibm-garage-cloud/inventory-service\">Inventory Microservice</AnchorLink>\n</AnchorLinks>\n\n","fileAbsolutePath":"/Users/mjperrins/projects/cat/guide/src/pages/practical/inventory/index.mdx"}}}}