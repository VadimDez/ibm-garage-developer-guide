{"componentChunkName":"component---src-pages-starterkits-overview-index-mdx","path":"/starterkits/overview/","webpackCompilationHash":"92df3496b82076b3a9a8","result":{"pageContext":{"isCreatedByStatefulCreatePages":true,"frontmatter":{"title":"Overview"},"relativePagePath":"/starterkits/overview/index.mdx","titleType":"page","MdxNode":{"id":"a3a1b5c7-eb8b-5b43-996d-63648f39042b","children":[],"parent":"a4b8463f-e4e2-58f0-a454-6cd165b4e372","internal":{"content":"---\ntitle: Overview\n---\n\n## Overview\n\nWith your development tools now installed, its time to\nfocus on writing code. To complement the IBM Cloud for Garage Development Tools this project provides\na set of Starter Kit Templates. These have been designed to give your a production ready\nentry point for cloud native development. There are a number of templates\nthat provide support for different architecture layers of your Kubernetes solution these includes:\n\n- User Interfaces\n- Backend for Backends\n- Microservices\n- Machine Learning (coming soon)\n\nYou can pick the template that best meets your requirements needs and it will seamlessly integrate\nwith the development tools. There is more information below on what is included in each template.\n\n<ArtDirection>\n\n![Starter Kit Architect](architecture.png)\n\n</ArtDirection>\n\n## Why another code template\n\nAs teams have built out production solutions using IBM Kubernetes Services and RedHat OpenShift\non the IBM Cloud it has became clear that starting with a `hello-world` type template slows down a project.\nIn cases where you are learning the basic principles of cloud native development with a specific language it does help to start with `hello-world`\nbut when you are building production code to be used by real users it takes a lot of effort to industrialize this code ready for production.\n\nThe objective of the *Starter Kit Templates* is to kick off a project quickly so they can reach maximum development velocity in the\nleast amount of time.\n\nWhy starter kit templates ? As the approach to cloud native microservice development has evolved\na number of language frameworks have come into play, runtime configuration technologies and best practices\nto improve quality and robustness. It becomes very time consuming to create, manage and maintain these elements.\n\n<Row>\n<Column colMd={2} colLg={5} noGutterMdLeft>\n\nIf we look at a typical cloud native app, they require a number of supporting files, similar to the ones\nfound in the outer ring of this diagram. They take time to create and are only often needed for the initial\nseed of the project. Its also never clear where the documentation is for these elements and how they are work together.\n\nSome typical examples :\n\n- Dockerfile\n- CI Pipeline Jenkins or Tekton\n- TDD Frameworks\n- Code Analysis\n- Monitoring / Logging Support\n- Cloud Service bindings and credentials\n- User Case logic UI, BFF, Microservice\n\n</Column>\n<Column colMd={2} colLg={6} noGutterMdLeft>\n\n<ArtDirection>\n\n![Initial JFrog](starterkitdiagram.png)\n\n</ArtDirection>\n\n</Column>\n</Row>\n\nIf these were provided to you as a developer and you could focus on integrating with cloud services and\nthe core business function of you app\n\n## What constitutes a good template\n\nIf you want to contribute a Starter Kit Template\n\n\n\n- Test\n- Unit test framework\n- Pact test framework\n- Integration testing including UX tests\n- SonarQube scan integration\n- Dockerfile using Universal Base Image\n- Jenkinsfile or Tekton pipeline that is production ready\n- README\n- License\n- Package.json\n- Starting Usecase example source code for example APIs, UIs, Dashboards, Machine learning models\n- Open Source\n\n## How to combine them into a solution\n\n\n\n","type":"Mdx","contentDigest":"a6684e559d7063672ab7f5debda2ed78","counter":227,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Overview"},"exports":{},"rawBody":"---\ntitle: Overview\n---\n\n## Overview\n\nWith your development tools now installed, its time to\nfocus on writing code. To complement the IBM Cloud for Garage Development Tools this project provides\na set of Starter Kit Templates. These have been designed to give your a production ready\nentry point for cloud native development. There are a number of templates\nthat provide support for different architecture layers of your Kubernetes solution these includes:\n\n- User Interfaces\n- Backend for Backends\n- Microservices\n- Machine Learning (coming soon)\n\nYou can pick the template that best meets your requirements needs and it will seamlessly integrate\nwith the development tools. There is more information below on what is included in each template.\n\n<ArtDirection>\n\n![Starter Kit Architect](architecture.png)\n\n</ArtDirection>\n\n## Why another code template\n\nAs teams have built out production solutions using IBM Kubernetes Services and RedHat OpenShift\non the IBM Cloud it has became clear that starting with a `hello-world` type template slows down a project.\nIn cases where you are learning the basic principles of cloud native development with a specific language it does help to start with `hello-world`\nbut when you are building production code to be used by real users it takes a lot of effort to industrialize this code ready for production.\n\nThe objective of the *Starter Kit Templates* is to kick off a project quickly so they can reach maximum development velocity in the\nleast amount of time.\n\nWhy starter kit templates ? As the approach to cloud native microservice development has evolved\na number of language frameworks have come into play, runtime configuration technologies and best practices\nto improve quality and robustness. It becomes very time consuming to create, manage and maintain these elements.\n\n<Row>\n<Column colMd={2} colLg={5} noGutterMdLeft>\n\nIf we look at a typical cloud native app, they require a number of supporting files, similar to the ones\nfound in the outer ring of this diagram. They take time to create and are only often needed for the initial\nseed of the project. Its also never clear where the documentation is for these elements and how they are work together.\n\nSome typical examples :\n\n- Dockerfile\n- CI Pipeline Jenkins or Tekton\n- TDD Frameworks\n- Code Analysis\n- Monitoring / Logging Support\n- Cloud Service bindings and credentials\n- User Case logic UI, BFF, Microservice\n\n</Column>\n<Column colMd={2} colLg={6} noGutterMdLeft>\n\n<ArtDirection>\n\n![Initial JFrog](starterkitdiagram.png)\n\n</ArtDirection>\n\n</Column>\n</Row>\n\nIf these were provided to you as a developer and you could focus on integrating with cloud services and\nthe core business function of you app\n\n## What constitutes a good template\n\nIf you want to contribute a Starter Kit Template\n\n\n\n- Test\n- Unit test framework\n- Pact test framework\n- Integration testing including UX tests\n- SonarQube scan integration\n- Dockerfile using Universal Base Image\n- Jenkinsfile or Tekton pipeline that is production ready\n- README\n- License\n- Package.json\n- Starting Usecase example source code for example APIs, UIs, Dashboards, Machine learning models\n- Open Source\n\n## How to combine them into a solution\n\n\n\n","fileAbsolutePath":"/Users/mjperrins/projects/cat/guide/src/pages/starterkits/overview/index.mdx"}}}}