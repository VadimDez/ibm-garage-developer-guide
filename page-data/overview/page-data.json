{"componentChunkName":"component---src-pages-overview-index-mdx","path":"/overview/","result":{"pageContext":{"isCreatedByStatefulCreatePages":true,"frontmatter":{"title":"Overview"},"relativePagePath":"/overview/index.mdx","titleType":"page","MdxNode":{"id":"62638837-380d-5ae7-ae89-37a543a4eab0","children":[],"parent":"138921a8-f6bf-5bcc-99bd-8d6d8d5f611e","internal":{"content":"---\ntitle: Overview\n---\n\n<PageDescription>\n\nUse this developer guide to get familiar with using the IBM Garage for Cloud Developer Tools\n\n</PageDescription>\n\n## Developer Tools\n\nThe IBM Garage for Cloud Developer Tools is an environment for developing cloud-native applications for deployment \nto Kubernetes and Red Hat OpenShift. It embodies IBM Garage Method principles and practices for consistently developed \napplications incorporating best practices that increase developer velocity for efficient deliverery of business value.\n\n### Overview\n\nEach development team installs its own copy of the Developer Tools environment into the team's account. \nThe environment includes several features that support IBM Garage Method best practices for consistent and rapid development \nof cloud-native applications:\n- **Installation**: The Developer Tools are able to install themselves as a new environment \n- **Cluster**: A Kubernetes or OpenShift cluster that both hosts the tools and itself is a deployment target for application builds\n- **SDLC**: Deployment target environments that support the application development lifecycle: *dev*, *test*, and *staging*\n- **CI/CD**: A prebuilt, ready-to-run continuous delivery pipeline incorporating best-of-breed open source software tools\n- **Backend services**: Cloud services commonly required by cloud-native applications for monitoring, security, and persistence\n- **Starter Kits**: Prebuilt code templates for common application components and tasks incorporating best practices that developers can add to their codebase as needed\n- **Dashboard**: A centralized tool to help developers use the environment's other tools, Starter Kits, and so on\n\nTypically a squad lead or lead developer installs and sets up a new Developer Tools environment after the initial inception workshop,\nproviding a place for the developers to start developing the minimum viable product (MVP).\nThe objective is to reduce the time required for a team to configure and prepare their development environment.\nThe key benefit is to make the end-to-end CI/CD development lifecycle consistent across each platform \nand make the out-of-the-box developer experience as simple as possible.\n\nThe installation is peformed using Terraform, with modular configuration so unneeded tools can be easily disabled or new tools added. \nThe combination of tools selected are proven in the industry to deliver real value for modern cloud native development.\n\n[Red Hat Open Innovation Labs CI/CD components](https://github.com/rht-labs/labs-ci-cd) embodies a very similar approach to how they deliver success with OpenShift.\n\nAfter installation, the Developer Tools environment consists of the following components and development tools:\n\n- An [IBM Cloud Kubernetes Service](https://www.ibm.com/cloud/container-service) \nor [Red Hat OpenShift on IBM Cloud](https://www.ibm.com/cloud/openshift) 3-node cluster\n- Cluster namespace that encapsulates the tooling installed in the cluser: *tools*\n- Cluster namespaces for deployment target environments: *dev*, *test*, and *staging*\n\nThe following best-of-breed open source software tools are installed in the cluster's *tools* namespace:\n\n| Capability                  | Tool                                            |Description |\n| --------------------------- |:--------------                                  |------------|\n| Continuous Integration      | [Jenkins CI](https://jenkins.io/)               | Jenkins is a common tool for Continuous Integration   |\n| Code Analysis               | [SonarQube](https://www.sonarqube.org/)         | SonarQube can scan code and display the results in a dashboard |\n| Artifact and Helm Storage   | [Artifactory](https://jfrog.com/open-source/)   | Artifactory is an artifact storage and Helm chart repository  |\n| Continuous Deployment       | [ArgoCD](https://argoproj.github.io/argo-cd/)   | ArgoCD support Continuous Delivery with GitOps |\n| Contract API Testing        | [Pact](https://docs.pact.io/)                   | Pact enables API contract testing |\n| Web IDE                     | [Eclipse CHE](https://www.eclipse.org/che/)     | IDE for editing and managing code in a web browser |\n\nThe following IBM Cloud services are created and bound to the cluster:\n\n| Capability                | Service        |Description |\n| -----------------------   |:-------------- |------------|\n| Logging                   | [LogDNA Logging](https://cloud.ibm.com/docs/services/Log-Analysis-with-LogDNA?topic=LogDNA-getting-started)  | Manage app logging LogDNA  |\n| Monitoring                | [SysDig Monitoring](https://cloud.ibm.com/docs/services/Monitoring-with-Sysdig?topic=Sysdig-getting-started) | Manage monitoring of apps with SysDig |\n| AppID                     | [AppID Application Authentication](https://cloud.ibm.com/docs/services/appid?topic=appid-service-access-management) | Secure your apps, APIs and Kubernetes Ingress end points |\n| Cloudant                  | [Cloudant NoSQL Database](https://cloud.ibm.com/docs/services/Cloudant?topic=cloudant-getting-started) | NoSQL Database commonly used for data persistence |\n| Cloud Object Storage      | [Cloud Object Storage Storage](https://cloud.ibm.com/docs/services/cloud-object-storage?topic=cloud-object-storage-getting-started) | Storage service commonly used for binary content |\n| PostreSQL                 | [PostgreSQL](https://cloud.ibm.com/docs/services/databases-for-postgresql?topic=databases-for-postgresql-about) (used by SonarQube) | SQL Database used for structure data persistence |\n\nThis diagram illustrates the Development Tools environment:\n\n![Provisioned environment](catalyst-provisioned-environment.png)\n\nIt shows the components in the environment: the cluster, the tools, the deployment target environments, and the cloud services.\n\n## Getting Started\n\nGet to know the Developer Tools environment:\n\n<AnchorLinks>\n  <AnchorLink to=\"/installation/overview\">Installation</AnchorLink>\n  <AnchorLink to=\"/getting-started/deploy-app\">Deploy First App</AnchorLink>\n  <AnchorLink to=\"/guides/overview\">Guides</AnchorLink>\n  <AnchorLink to=\"/starterkits/overview\">Starter Kit Templates</AnchorLink>\n</AnchorLinks>\n","type":"Mdx","contentDigest":"27e6caf5ba4b1a9dc1a2013947b115fe","counter":243,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Overview"},"exports":{},"rawBody":"---\ntitle: Overview\n---\n\n<PageDescription>\n\nUse this developer guide to get familiar with using the IBM Garage for Cloud Developer Tools\n\n</PageDescription>\n\n## Developer Tools\n\nThe IBM Garage for Cloud Developer Tools is an environment for developing cloud-native applications for deployment \nto Kubernetes and Red Hat OpenShift. It embodies IBM Garage Method principles and practices for consistently developed \napplications incorporating best practices that increase developer velocity for efficient deliverery of business value.\n\n### Overview\n\nEach development team installs its own copy of the Developer Tools environment into the team's account. \nThe environment includes several features that support IBM Garage Method best practices for consistent and rapid development \nof cloud-native applications:\n- **Installation**: The Developer Tools are able to install themselves as a new environment \n- **Cluster**: A Kubernetes or OpenShift cluster that both hosts the tools and itself is a deployment target for application builds\n- **SDLC**: Deployment target environments that support the application development lifecycle: *dev*, *test*, and *staging*\n- **CI/CD**: A prebuilt, ready-to-run continuous delivery pipeline incorporating best-of-breed open source software tools\n- **Backend services**: Cloud services commonly required by cloud-native applications for monitoring, security, and persistence\n- **Starter Kits**: Prebuilt code templates for common application components and tasks incorporating best practices that developers can add to their codebase as needed\n- **Dashboard**: A centralized tool to help developers use the environment's other tools, Starter Kits, and so on\n\nTypically a squad lead or lead developer installs and sets up a new Developer Tools environment after the initial inception workshop,\nproviding a place for the developers to start developing the minimum viable product (MVP).\nThe objective is to reduce the time required for a team to configure and prepare their development environment.\nThe key benefit is to make the end-to-end CI/CD development lifecycle consistent across each platform \nand make the out-of-the-box developer experience as simple as possible.\n\nThe installation is peformed using Terraform, with modular configuration so unneeded tools can be easily disabled or new tools added. \nThe combination of tools selected are proven in the industry to deliver real value for modern cloud native development.\n\n[Red Hat Open Innovation Labs CI/CD components](https://github.com/rht-labs/labs-ci-cd) embodies a very similar approach to how they deliver success with OpenShift.\n\nAfter installation, the Developer Tools environment consists of the following components and development tools:\n\n- An [IBM Cloud Kubernetes Service](https://www.ibm.com/cloud/container-service) \nor [Red Hat OpenShift on IBM Cloud](https://www.ibm.com/cloud/openshift) 3-node cluster\n- Cluster namespace that encapsulates the tooling installed in the cluser: *tools*\n- Cluster namespaces for deployment target environments: *dev*, *test*, and *staging*\n\nThe following best-of-breed open source software tools are installed in the cluster's *tools* namespace:\n\n| Capability                  | Tool                                            |Description |\n| --------------------------- |:--------------                                  |------------|\n| Continuous Integration      | [Jenkins CI](https://jenkins.io/)               | Jenkins is a common tool for Continuous Integration   |\n| Code Analysis               | [SonarQube](https://www.sonarqube.org/)         | SonarQube can scan code and display the results in a dashboard |\n| Artifact and Helm Storage   | [Artifactory](https://jfrog.com/open-source/)   | Artifactory is an artifact storage and Helm chart repository  |\n| Continuous Deployment       | [ArgoCD](https://argoproj.github.io/argo-cd/)   | ArgoCD support Continuous Delivery with GitOps |\n| Contract API Testing        | [Pact](https://docs.pact.io/)                   | Pact enables API contract testing |\n| Web IDE                     | [Eclipse CHE](https://www.eclipse.org/che/)     | IDE for editing and managing code in a web browser |\n\nThe following IBM Cloud services are created and bound to the cluster:\n\n| Capability                | Service        |Description |\n| -----------------------   |:-------------- |------------|\n| Logging                   | [LogDNA Logging](https://cloud.ibm.com/docs/services/Log-Analysis-with-LogDNA?topic=LogDNA-getting-started)  | Manage app logging LogDNA  |\n| Monitoring                | [SysDig Monitoring](https://cloud.ibm.com/docs/services/Monitoring-with-Sysdig?topic=Sysdig-getting-started) | Manage monitoring of apps with SysDig |\n| AppID                     | [AppID Application Authentication](https://cloud.ibm.com/docs/services/appid?topic=appid-service-access-management) | Secure your apps, APIs and Kubernetes Ingress end points |\n| Cloudant                  | [Cloudant NoSQL Database](https://cloud.ibm.com/docs/services/Cloudant?topic=cloudant-getting-started) | NoSQL Database commonly used for data persistence |\n| Cloud Object Storage      | [Cloud Object Storage Storage](https://cloud.ibm.com/docs/services/cloud-object-storage?topic=cloud-object-storage-getting-started) | Storage service commonly used for binary content |\n| PostreSQL                 | [PostgreSQL](https://cloud.ibm.com/docs/services/databases-for-postgresql?topic=databases-for-postgresql-about) (used by SonarQube) | SQL Database used for structure data persistence |\n\nThis diagram illustrates the Development Tools environment:\n\n![Provisioned environment](catalyst-provisioned-environment.png)\n\nIt shows the components in the environment: the cluster, the tools, the deployment target environments, and the cloud services.\n\n## Getting Started\n\nGet to know the Developer Tools environment:\n\n<AnchorLinks>\n  <AnchorLink to=\"/installation/overview\">Installation</AnchorLink>\n  <AnchorLink to=\"/getting-started/deploy-app\">Deploy First App</AnchorLink>\n  <AnchorLink to=\"/guides/overview\">Guides</AnchorLink>\n  <AnchorLink to=\"/starterkits/overview\">Starter Kit Templates</AnchorLink>\n</AnchorLinks>\n","fileAbsolutePath":"/Users/seansund/ws/catalyst/garage-developer-guide/src/pages/overview/index.mdx"}}}}