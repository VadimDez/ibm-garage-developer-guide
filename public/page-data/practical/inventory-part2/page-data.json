{"componentChunkName":"component---src-pages-practical-inventory-part-2-index-mdx","path":"/practical/inventory-part2/","result":{"pageContext":{"isCreatedByStatefulCreatePages":true,"frontmatter":{"title":"Inventory Micro App - Part 2"},"relativePagePath":"/practical/inventory-part2/index.mdx","titleType":"page","MdxNode":{"id":"8107f822-7eb9-560d-a9b3-bffceb781f76","children":[],"parent":"635c6752-f987-5729-a8f9-19efe34789e5","internal":{"content":"---\ntitle: Inventory Micro App - Part 2\n---\n\n<PageDescription>\n\nAn example three tier application architecture you can build and have deployed in IBM Kubernetes service or IBM Red Hat OpenShift in less than an hour using the IBM Garage for Cloud Developer Tools and Starter Kit Templates.\n\n</PageDescription>\n\n## Guide\n\nPart 2 of the guide is a follow on from Part 2 and will concentrate on building out the following areas :\n\n- Adding **Cloudant** database and populating it with data\n- Enabling application security with **App ID**\n-\n\nThis Microapp guidance Continue from [Inventory Micro App Part 1](/practical/inventory-part1)\n\n\n### Add a Cloudant backend to the service\n\n#### Populating the Databse\n\nThe initial setup\n\n\n\n\n\n\n\n\n\n\n#### Update the gradle config to include cloudant dependencies\n\n1. Add `build-services.gradle` to the gradle folder\n\n    gradle/build-services.gradle\n    ```\n    dependencies {\n        compile group: 'com.cloudant', name: 'cloudant-client', version: '2.17.0'\n        compile group: 'com.jayway.jsonpath', name: 'json-path', version: '2.4.0'\n        compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.1'\n        compile group: 'joda-time', name: 'joda-time', version: '2.10.3'\n    }\n    ```\n\n2. Apply build-services.gradle to build.gradle\n\n    build.gradle\n    ```\n    ...\n    apply from:   'gradle/build-services.gradle'\n    ...\n    ```\n\n#### Add configuration values\n\n1. Add CloudantConfig to hold the url, username, password, and databaseName values\n\n    com.ibm.inventory_management.config.CloudantConfig\n    ```java\n    package com.ibm.inventory_management.config;\n\n    import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n\n    @JsonIgnoreProperties(ignoreUnknown = true)\n    public class CloudantConfig {\n        private String url;\n        private String username;\n        private String password;\n        private String databaseName;\n\n        public String getUrl() {\n            return url;\n        }\n\n        public void setUrl(String url) {\n            this.url = url;\n        }\n\n        public CloudantConfig withUrl(String url) {\n            this.setUrl(url);\n\n            return this;\n        }\n\n        public String getUsername() {\n            return username;\n        }\n\n        public void setUsername(String username) {\n            this.username = username;\n        }\n\n        public CloudantConfig withUsername(String username) {\n            this.setUsername(username);\n\n            return this;\n        }\n\n        public String getPassword() {\n            return password;\n        }\n\n        public void setPassword(String password) {\n            this.password = password;\n        }\n\n        public CloudantConfig withPassword(String password) {\n            this.setPassword(password);\n\n            return this;\n        }\n\n        public String getDatabaseName() {\n            return databaseName;\n        }\n\n        public void setDatabaseName(String databaseName) {\n            this.databaseName = databaseName;\n        }\n\n        public CloudantConfig withDatabaseName(String databaseName) {\n            this.setDatabaseName(databaseName);\n\n            return this;\n        }\n\n        public String toString() {\n            return \"[CloudantConfig: url=\" + this.url + \", username=\" + this.username + \", name=\" + this.databaseName + \"]\";\n        }\n    }\n    ```\n\n2. Implement logic to load the configuration from the secret binding or local file\n\n    com.ibm.inventory_management.config.CloudantMapping\n    ```java\n    package com.ibm.inventory_management.config;\n\n    import java.io.Serializable;\n\n    import com.fasterxml.jackson.annotation.JsonProperty;\n\n    public class CloudantMapping implements Serializable {\n        @JsonProperty(value = \"CLOUDANT_CONFIG\")\n        private String cloudantConfig;\n\n        public String getCloudantConfig() {\n            return cloudantConfig;\n        }\n\n        public void setCloudantConfig(String cloudantConfig) {\n            this.cloudantConfig = cloudantConfig;\n        }\n    }\n    ```\n\n    com.ibm.inventory_management.config.CloudantConfigFactory\n    ```java\n    package com.ibm.inventory_management.config;\n\n    import java.io.IOException;\n\n    import com.fasterxml.jackson.databind.ObjectMapper;\n    import org.springframework.context.annotation.Bean;\n    import org.springframework.stereotype.Component;\n\n    @Component\n    public class CloudantConfigFactory {\n        @Bean\n        public CloudantConfig buildCloudantConfig() throws IOException {\n            return buildConfigFromBinding(\n                    loadCloudantConfig(),\n                    loadDatabaseName()\n            );\n        }\n\n        protected String loadCloudantConfig() throws IOException {\n            return System.getProperty(\"CLOUDANT_CONFIG\") != null\n                    ? System.getProperty(\"CLOUDANT_CONFIG\")\n                    : loadCloudantConfigFromLocalDev();\n        }\n\n        protected String loadCloudantConfigFromLocalDev() throws IOException {\n            final ObjectMapper mapper = new ObjectMapper();\n\n            final CloudantMapping mappings = mapper.readValue(\n                    this.getClass().getClassLoader().getResourceAsStream(\"mappings.json\"),\n                    CloudantMapping.class\n            );\n\n            return mappings.getCloudantConfig();\n        }\n\n        protected String loadDatabaseName() {\n            return System.getProperty(\"DATABASE_NAME\") != null\n                    ? System.getProperty(\"DATABASE_NAME\")\n                    : \"stock-items\";\n        }\n\n        protected CloudantConfig buildConfigFromBinding(String binding, String databaseName) throws IOException {\n            final ObjectMapper mapper = new ObjectMapper();\n\n            return mapper.readValue(binding, CloudantConfig.class)\n                    .withDatabaseName(databaseName);\n        }\n    }\n    ```\n\n#### Set up local development\n\n1. Log into cloud.ibm.com and open the Cloudant service from the resource list\n\n2. Click on service credentials and expand the listed credentials\n\n3. Copy the json contents from the credentials into `mappings.json` under CLOUDANT_CONFIG\n\n    src/main/resources/mappings.json\n    ```\n    {\n      \"CLOUDANT_CONFIG\": \"{paste json here}\"\n    }\n    ```\n\n#### Implement the service\n\n1. Add a CloudantApi component to create the CloudantClient instance from the configuration\n\n    com.ibm.inventory_management.service.CloudServicesException\n    ```java\n    package com.ibm.inventory_management.service;\n\n    public class CloudServicesException extends Exception {\n        public CloudServicesException() {\n        }\n\n        public CloudServicesException(String message) {\n            super(message);\n        }\n\n        public CloudServicesException(String message, Throwable cause) {\n            super(message, cause);\n        }\n\n        public CloudServicesException(Throwable cause) {\n            super(cause);\n        }\n\n        public CloudServicesException(\n                String message,\n                Throwable cause,\n                boolean enableSuppression,\n                boolean writableStackTrace\n        ) {\n            super(message, cause, enableSuppression, writableStackTrace);\n        }\n    }\n    ```\n\n    com.ibm.inventory_management.service.CloudantApi\n    ```java\n    package com.ibm.inventory_management.service;\n\n    import java.net.MalformedURLException;\n    import java.net.URL;\n\n    import com.cloudant.client.api.ClientBuilder;\n    import com.cloudant.client.api.CloudantClient;\n    import org.springframework.context.annotation.Bean;\n    import org.springframework.stereotype.Component;\n\n    import com.ibm.inventory_management.config.CloudantConfig;\n\n    @Component\n    public class CloudantApi {\n        @Bean\n        public CloudantClient buildCloudant(CloudantConfig config) throws CloudServicesException {\n            System.out.println(\"Config: \" + config);\n            URL url = null;\n            try {\n                url = new URL(config.getUrl());\n            } catch (MalformedURLException e) {\n                throw new CloudServicesException(\"Invalid service URL specified\", e);\n            }\n\n            return ClientBuilder\n                    .url(url)\n                    .username(config.getUsername())\n                    .password(config.getPassword())\n                    .build();\n        }\n    }\n    ```\n\n2. Add the service implementation\n\n    com.ibm.inventory_management.service.StockItemService\n    ```java\n    package com.ibm.inventory_management.service;\n\n    import java.io.IOException;\n    import java.util.List;\n    import javax.annotation.PostConstruct;\n\n    import com.cloudant.client.api.CloudantClient;\n    import com.cloudant.client.api.Database;\n    import org.springframework.context.annotation.Primary;\n    import org.springframework.stereotype.Service;\n\n    import com.ibm.inventory_management.config.CloudantConfig;\n    import com.ibm.inventory_management.model.StockItem;\n\n    @Service\n    @Primary\n    public class StockItemService implements StockItemApi {\n        private CloudantConfig config;\n        private CloudantClient client;\n        private Database db = null;\n\n        public StockItemService(CloudantConfig config, CloudantClient client) {\n            this.config = config;\n            this.client = client;\n        }\n\n        @PostConstruct\n        public void init() {\n            db = client.database(config.getDatabaseName(), true);\n        }\n\n        @Override\n        public List<StockItem> listStockItems() throws Exception {\n\n            try {\n                return db.getAllDocsRequestBuilder()\n                        .includeDocs(true)\n                        .build()\n                        .getResponse()\n                        .getDocsAs(StockItem.class);\n\n            } catch (IOException e) {\n                throw new Exception(\"\", e);\n            }\n        }\n    }\n    ```\n\n3. Remove the `@Primary` annotation from the mock service\n\n#### Add the values to the helm chart\n\n1. Update the `cloudantBinding` and `databaseName` values in values.yaml\n\n    **Note:** The cloudantBinding value should match the name of the cloudant binding secret\n\n### Enable AppId on the application\n\n#### User Interface\n\n1. Update the `values.yaml` file in the chart to set `ingress.appId.enabled=true` and to set the value for the AppId binding secret\n\n```yaml\n...\nappidBinding: \"binding-sms-test-oc-appid\"\n\ningress:\n  enabled: true\n  appid:\n    enabled: true\n    # web or app - https://cloud.ibm.com/docs/services/appid?topic=appid-kube-auth\n    requestType: web\n    ...\n```\n\n#### AppId redirect url config\n\n1. When the UI application is available, navigate to the https url. An error page should be displayed that looks like the\nfollowing:\n    ![AppId redirect error](images/appid-redirect-error.png)\n\n2. The url for the error page will look like the following:\n\n    `https://us-south.appid.cloud.ibm.com/oauth/v4/25d16cda-8899-46fa-a5ae-9818f93dd1d3/authorization?client_id=0351c750-a3f0-4b8c-818b-d14558f9dfb9&response_type=code&redirect_uri=https://inventory-manangement-ui-dev.sms-test-oc-cluster.us-east.containers.appdomain.cloud/appid_callback&scope=appid_default`\n\n    Get the value of the `redirect_url` parameter.\n\n3. Open the IBM Cloud resource list - `https://cloud.ibm.com/resources`\n\n4. Open the AppId instance to the `Manage Authentication` -> `Authentication Settings`\n\n    ![AppId authentication settings](images/appid-authentication-settings.png)\n\n5. Add the `redirect_url` to the web redirect URLs\n\n#### Add users to AppId\n\n1. Open the AppId instance to `Cloud Directory` -> `Users`\n\n    ![AppId cloud directory users](images/appid-cloud-directory-users.png)\n\n2. Add users\n\n\n\n## Summary\n\nYou have now completed the Micro App Guide demonstrating the _Inventory_ solution.\n\n## Solution Links\n\nIf you want to skip the guide and just get the components running, here are the solution Git Repositories. You can clone these and `igc pipeline` them to register them in the CI pipeline. The **README.md** may include additional setup for populating test data etc.\n\n<AnchorLinks>\n  <AnchorLink to=\"https://github.com/ibm-garage-cloud/inventory-management-ui\">Inventory Management User Interface</AnchorLink>\n  <AnchorLink to=\"https://github.com/ibm-garage-cloud/inventory-management-bff\">Inventory Management Backend for Frontend</AnchorLink>\n  <AnchorLink to=\"https://github.com/ibm-garage-cloud/inventory-management-service\">Inventory Management Microservice</AnchorLink>\n</AnchorLinks>\n\n","type":"Mdx","contentDigest":"266e89e1dfc6c3598e4706e791ee4205","counter":322,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Inventory Micro App - Part 2"},"exports":{},"rawBody":"---\ntitle: Inventory Micro App - Part 2\n---\n\n<PageDescription>\n\nAn example three tier application architecture you can build and have deployed in IBM Kubernetes service or IBM Red Hat OpenShift in less than an hour using the IBM Garage for Cloud Developer Tools and Starter Kit Templates.\n\n</PageDescription>\n\n## Guide\n\nPart 2 of the guide is a follow on from Part 2 and will concentrate on building out the following areas :\n\n- Adding **Cloudant** database and populating it with data\n- Enabling application security with **App ID**\n-\n\nThis Microapp guidance Continue from [Inventory Micro App Part 1](/practical/inventory-part1)\n\n\n### Add a Cloudant backend to the service\n\n#### Populating the Databse\n\nThe initial setup\n\n\n\n\n\n\n\n\n\n\n#### Update the gradle config to include cloudant dependencies\n\n1. Add `build-services.gradle` to the gradle folder\n\n    gradle/build-services.gradle\n    ```\n    dependencies {\n        compile group: 'com.cloudant', name: 'cloudant-client', version: '2.17.0'\n        compile group: 'com.jayway.jsonpath', name: 'json-path', version: '2.4.0'\n        compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.1'\n        compile group: 'joda-time', name: 'joda-time', version: '2.10.3'\n    }\n    ```\n\n2. Apply build-services.gradle to build.gradle\n\n    build.gradle\n    ```\n    ...\n    apply from:   'gradle/build-services.gradle'\n    ...\n    ```\n\n#### Add configuration values\n\n1. Add CloudantConfig to hold the url, username, password, and databaseName values\n\n    com.ibm.inventory_management.config.CloudantConfig\n    ```java\n    package com.ibm.inventory_management.config;\n\n    import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n\n    @JsonIgnoreProperties(ignoreUnknown = true)\n    public class CloudantConfig {\n        private String url;\n        private String username;\n        private String password;\n        private String databaseName;\n\n        public String getUrl() {\n            return url;\n        }\n\n        public void setUrl(String url) {\n            this.url = url;\n        }\n\n        public CloudantConfig withUrl(String url) {\n            this.setUrl(url);\n\n            return this;\n        }\n\n        public String getUsername() {\n            return username;\n        }\n\n        public void setUsername(String username) {\n            this.username = username;\n        }\n\n        public CloudantConfig withUsername(String username) {\n            this.setUsername(username);\n\n            return this;\n        }\n\n        public String getPassword() {\n            return password;\n        }\n\n        public void setPassword(String password) {\n            this.password = password;\n        }\n\n        public CloudantConfig withPassword(String password) {\n            this.setPassword(password);\n\n            return this;\n        }\n\n        public String getDatabaseName() {\n            return databaseName;\n        }\n\n        public void setDatabaseName(String databaseName) {\n            this.databaseName = databaseName;\n        }\n\n        public CloudantConfig withDatabaseName(String databaseName) {\n            this.setDatabaseName(databaseName);\n\n            return this;\n        }\n\n        public String toString() {\n            return \"[CloudantConfig: url=\" + this.url + \", username=\" + this.username + \", name=\" + this.databaseName + \"]\";\n        }\n    }\n    ```\n\n2. Implement logic to load the configuration from the secret binding or local file\n\n    com.ibm.inventory_management.config.CloudantMapping\n    ```java\n    package com.ibm.inventory_management.config;\n\n    import java.io.Serializable;\n\n    import com.fasterxml.jackson.annotation.JsonProperty;\n\n    public class CloudantMapping implements Serializable {\n        @JsonProperty(value = \"CLOUDANT_CONFIG\")\n        private String cloudantConfig;\n\n        public String getCloudantConfig() {\n            return cloudantConfig;\n        }\n\n        public void setCloudantConfig(String cloudantConfig) {\n            this.cloudantConfig = cloudantConfig;\n        }\n    }\n    ```\n\n    com.ibm.inventory_management.config.CloudantConfigFactory\n    ```java\n    package com.ibm.inventory_management.config;\n\n    import java.io.IOException;\n\n    import com.fasterxml.jackson.databind.ObjectMapper;\n    import org.springframework.context.annotation.Bean;\n    import org.springframework.stereotype.Component;\n\n    @Component\n    public class CloudantConfigFactory {\n        @Bean\n        public CloudantConfig buildCloudantConfig() throws IOException {\n            return buildConfigFromBinding(\n                    loadCloudantConfig(),\n                    loadDatabaseName()\n            );\n        }\n\n        protected String loadCloudantConfig() throws IOException {\n            return System.getProperty(\"CLOUDANT_CONFIG\") != null\n                    ? System.getProperty(\"CLOUDANT_CONFIG\")\n                    : loadCloudantConfigFromLocalDev();\n        }\n\n        protected String loadCloudantConfigFromLocalDev() throws IOException {\n            final ObjectMapper mapper = new ObjectMapper();\n\n            final CloudantMapping mappings = mapper.readValue(\n                    this.getClass().getClassLoader().getResourceAsStream(\"mappings.json\"),\n                    CloudantMapping.class\n            );\n\n            return mappings.getCloudantConfig();\n        }\n\n        protected String loadDatabaseName() {\n            return System.getProperty(\"DATABASE_NAME\") != null\n                    ? System.getProperty(\"DATABASE_NAME\")\n                    : \"stock-items\";\n        }\n\n        protected CloudantConfig buildConfigFromBinding(String binding, String databaseName) throws IOException {\n            final ObjectMapper mapper = new ObjectMapper();\n\n            return mapper.readValue(binding, CloudantConfig.class)\n                    .withDatabaseName(databaseName);\n        }\n    }\n    ```\n\n#### Set up local development\n\n1. Log into cloud.ibm.com and open the Cloudant service from the resource list\n\n2. Click on service credentials and expand the listed credentials\n\n3. Copy the json contents from the credentials into `mappings.json` under CLOUDANT_CONFIG\n\n    src/main/resources/mappings.json\n    ```\n    {\n      \"CLOUDANT_CONFIG\": \"{paste json here}\"\n    }\n    ```\n\n#### Implement the service\n\n1. Add a CloudantApi component to create the CloudantClient instance from the configuration\n\n    com.ibm.inventory_management.service.CloudServicesException\n    ```java\n    package com.ibm.inventory_management.service;\n\n    public class CloudServicesException extends Exception {\n        public CloudServicesException() {\n        }\n\n        public CloudServicesException(String message) {\n            super(message);\n        }\n\n        public CloudServicesException(String message, Throwable cause) {\n            super(message, cause);\n        }\n\n        public CloudServicesException(Throwable cause) {\n            super(cause);\n        }\n\n        public CloudServicesException(\n                String message,\n                Throwable cause,\n                boolean enableSuppression,\n                boolean writableStackTrace\n        ) {\n            super(message, cause, enableSuppression, writableStackTrace);\n        }\n    }\n    ```\n\n    com.ibm.inventory_management.service.CloudantApi\n    ```java\n    package com.ibm.inventory_management.service;\n\n    import java.net.MalformedURLException;\n    import java.net.URL;\n\n    import com.cloudant.client.api.ClientBuilder;\n    import com.cloudant.client.api.CloudantClient;\n    import org.springframework.context.annotation.Bean;\n    import org.springframework.stereotype.Component;\n\n    import com.ibm.inventory_management.config.CloudantConfig;\n\n    @Component\n    public class CloudantApi {\n        @Bean\n        public CloudantClient buildCloudant(CloudantConfig config) throws CloudServicesException {\n            System.out.println(\"Config: \" + config);\n            URL url = null;\n            try {\n                url = new URL(config.getUrl());\n            } catch (MalformedURLException e) {\n                throw new CloudServicesException(\"Invalid service URL specified\", e);\n            }\n\n            return ClientBuilder\n                    .url(url)\n                    .username(config.getUsername())\n                    .password(config.getPassword())\n                    .build();\n        }\n    }\n    ```\n\n2. Add the service implementation\n\n    com.ibm.inventory_management.service.StockItemService\n    ```java\n    package com.ibm.inventory_management.service;\n\n    import java.io.IOException;\n    import java.util.List;\n    import javax.annotation.PostConstruct;\n\n    import com.cloudant.client.api.CloudantClient;\n    import com.cloudant.client.api.Database;\n    import org.springframework.context.annotation.Primary;\n    import org.springframework.stereotype.Service;\n\n    import com.ibm.inventory_management.config.CloudantConfig;\n    import com.ibm.inventory_management.model.StockItem;\n\n    @Service\n    @Primary\n    public class StockItemService implements StockItemApi {\n        private CloudantConfig config;\n        private CloudantClient client;\n        private Database db = null;\n\n        public StockItemService(CloudantConfig config, CloudantClient client) {\n            this.config = config;\n            this.client = client;\n        }\n\n        @PostConstruct\n        public void init() {\n            db = client.database(config.getDatabaseName(), true);\n        }\n\n        @Override\n        public List<StockItem> listStockItems() throws Exception {\n\n            try {\n                return db.getAllDocsRequestBuilder()\n                        .includeDocs(true)\n                        .build()\n                        .getResponse()\n                        .getDocsAs(StockItem.class);\n\n            } catch (IOException e) {\n                throw new Exception(\"\", e);\n            }\n        }\n    }\n    ```\n\n3. Remove the `@Primary` annotation from the mock service\n\n#### Add the values to the helm chart\n\n1. Update the `cloudantBinding` and `databaseName` values in values.yaml\n\n    **Note:** The cloudantBinding value should match the name of the cloudant binding secret\n\n### Enable AppId on the application\n\n#### User Interface\n\n1. Update the `values.yaml` file in the chart to set `ingress.appId.enabled=true` and to set the value for the AppId binding secret\n\n```yaml\n...\nappidBinding: \"binding-sms-test-oc-appid\"\n\ningress:\n  enabled: true\n  appid:\n    enabled: true\n    # web or app - https://cloud.ibm.com/docs/services/appid?topic=appid-kube-auth\n    requestType: web\n    ...\n```\n\n#### AppId redirect url config\n\n1. When the UI application is available, navigate to the https url. An error page should be displayed that looks like the\nfollowing:\n    ![AppId redirect error](images/appid-redirect-error.png)\n\n2. The url for the error page will look like the following:\n\n    `https://us-south.appid.cloud.ibm.com/oauth/v4/25d16cda-8899-46fa-a5ae-9818f93dd1d3/authorization?client_id=0351c750-a3f0-4b8c-818b-d14558f9dfb9&response_type=code&redirect_uri=https://inventory-manangement-ui-dev.sms-test-oc-cluster.us-east.containers.appdomain.cloud/appid_callback&scope=appid_default`\n\n    Get the value of the `redirect_url` parameter.\n\n3. Open the IBM Cloud resource list - `https://cloud.ibm.com/resources`\n\n4. Open the AppId instance to the `Manage Authentication` -> `Authentication Settings`\n\n    ![AppId authentication settings](images/appid-authentication-settings.png)\n\n5. Add the `redirect_url` to the web redirect URLs\n\n#### Add users to AppId\n\n1. Open the AppId instance to `Cloud Directory` -> `Users`\n\n    ![AppId cloud directory users](images/appid-cloud-directory-users.png)\n\n2. Add users\n\n\n\n## Summary\n\nYou have now completed the Micro App Guide demonstrating the _Inventory_ solution.\n\n## Solution Links\n\nIf you want to skip the guide and just get the components running, here are the solution Git Repositories. You can clone these and `igc pipeline` them to register them in the CI pipeline. The **README.md** may include additional setup for populating test data etc.\n\n<AnchorLinks>\n  <AnchorLink to=\"https://github.com/ibm-garage-cloud/inventory-management-ui\">Inventory Management User Interface</AnchorLink>\n  <AnchorLink to=\"https://github.com/ibm-garage-cloud/inventory-management-bff\">Inventory Management Backend for Frontend</AnchorLink>\n  <AnchorLink to=\"https://github.com/ibm-garage-cloud/inventory-management-service\">Inventory Management Microservice</AnchorLink>\n</AnchorLinks>\n\n","fileAbsolutePath":"/home/jenkins/workspace/dev/dev-ibm-garage-cloud.ibm-garage-developer-guide.sms-pipeline/src/pages/practical/inventory-part2/index.mdx"}}}}